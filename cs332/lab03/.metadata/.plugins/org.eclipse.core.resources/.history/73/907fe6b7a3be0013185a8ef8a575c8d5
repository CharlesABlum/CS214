//import java.lang.*;

public class L3Address {
	//Broadcast address - all 1s
	static final int BCAST = 0xff;
	//Network and Host bit-sizes
	static final int NETWORK_SIZE = 8;
	static final int HOST_SIZE = 8;

	//value from 0 to 255 (0xff)
	private int networkPart;
	private int hostPart;
	
	/**
	 * create an L3 address from a network and host
	 * @param net
	 * @param host
	 */
	public L3Address( int net, int host ) {
		networkPart = net;
		hostPart = host;
	}
	
	/**
	 * create an L3 address from a string of bits
	 * @param bits, a 16-bit field per spec
	 */
	public L3Address( String bits ) {
		//split the string for network and host parts
		String net = bits.substring(0, NETWORK_SIZE),
			host = bits.substring(NETWORK_SIZE + 1, HOST_SIZE);
		networkPart = Integer.parseInt(net, 2);
		hostPart = Integer.parseInt(host, 2);		
	}
	
	/**
	 * Checks my address with another, returns true if identical
	 * @param other
	 * @return
	 */
	public boolean equals( L3Address other  ) {
		if ( this.networkPart == other.getNetwork() && this.hostPart == other.getHost() )
			return true;
		else 
			return false;
	}
	
	/**
	 * 
	 * @param in
	 */
	public void fromDottedDecimal( String in ) {
		//TODO
	}
	
	/**
	 * converts the network and host parts into a single, dotted string
	 * @return String of the form: "networkPart.hostPart"
	 */
	public String toDottedDecimal() {
		return Integer.toString(networkPart) + "." + Integer.toString(hostPart);
	}
	
	public String toString() {
		return Integer.toBinaryString(networkPart) + Integer.toBinaryString(hostPart);
	}
	
	/**
	 * getters for network and host
	 * @return host or network part
	 */
	public int getHost() { return hostPart; }
	public int getNetwork() { return networkPart; }
	
	/**
	 * returns true if the host part is the BCAST address
	 * @return
	 */
	public boolean isBcast() {
		return hostPart == BCAST;
	}
	
	
	
	
	
	public static String toInt( String bits ) {
		
		char asdf
		
	String ret = Integer.toBinaryString(val);
	if (ret.length() < length) {
	    // pre-pend 0 bits.
	    int num2Add = length - ret.length();
   	    for (int i = 0; i < num2Add; i++) {
		ret = "0" + ret;
	    }
	}
	return ret;
    }
	
}