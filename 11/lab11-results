Script started on Thu 01 May 2014 09:30:25 AM EDT
cab35@kay:~/Documents/spring-2014/11/c++$ cat threaded_array_sum.cpp 
/* threaded_array_sum.cpp sums the values in a file
 *  by reading them into an array and summing them there.
 *  It splits the work across several threads to increase performance.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by:Charles Blum
 * Date:29 April 2014
 *
 * Usage: array_sum <inFileName>
 */

#include <iostream>     // cin, cout, etc
#include <fstream>      // ifstream, ofstream
#include <vector>       // vector
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include "NanoTimer.h"  // nanosecond timer
#include <iomanip>      // formatted output
#include <omp.h>	// OmpenMP
using namespace std;

void checkCommandLine(int argc);
void readFile(const string& fileName, vector<int>& v);
long sum(const vector<int>& v, unsigned numThreads);
void display(long total, const NanoTimer& nTimer);

int main(int argc, char** argv) {
   checkCommandLine(argc);
   vector<int> values;
   readFile( argv[1], values );
   long total;
   NanoTimer nTimer;
   nTimer.start();
   total = sum( values, atoi(argv[2]) );
   nTimer.stop();
   display(total, nTimer);
}

void checkCommandLine(int argc) {
   if (argc != 3) {
      cerr << "\nUsage: array_sum <fileName> <numThreads>\n\n";
      exit(1);
   }
}

long sum(const vector<int>& v, unsigned numThreads) {
   long result = 0;

   #pragma omp parallel for num_threads(numThreads) reduction(+ : result)
   for (unsigned i = 0; i < v.size(); i++) {
      result += v[i];
   }

   return result;
}


void readFile(const string& fileName, vector<int>& v) {
   ifstream fin( fileName.c_str() );
   assert( fin.is_open() );

   int number;
   fin >> number;
   v.reserve(number);
   while (true) {
      fin >> number;
      if ( fin.eof() ) break;
      v.push_back(number);
   }
   
   fin.close();
}

void display(long total , const NanoTimer& nTimer) {
   cout << "\nThe sum is " << total 
        << "\n and computing it took " 
        << fixed << showpoint << setprecision(9) 
        << nTimer 
        << " secs.\n" << endl;

}
cab35@kay:~/Documents/spring-2014/11/c++$ make
make: Nothing to be done for `all'.
cab35@kay:~/Documents/spring-2014/11/c++$ ./threaded_array_sum 10[K[K./n[K[K./numbers/1000000numbers.txt 1

The sum is 500869305
 and computing it took 0.003130866 secs.

cab35@kay:~/Documents/spring-2014/11/c++$ ./threaded_array_sum ../numbers/1000000numbers.txt 1[K4

The sum is 500869305
 and computing it took 0.000919591 secs.

cab35@kay:~/Documents/spring-2014/11/c++$ exit

Script done on Thu 01 May 2014 09:30:53 AM EDT
Script started on Thu 01 May 2014 11:50:16 AM EDT
cab35@kay:~/Documents/spring-2014/11/ada$ ta[K[Kcat tasked_array_sum.adb 
-- tasked_array_sum.adb sums the values from an input file using an array
-- and tasks (i.e. threads cause ada is old...).
--
-- Begun by: Prof. Adams, for CS 214 at Calvin College.
-- Completed by:Charles Blum
-- Date:30 April 2014
--
-- Usage: array_ <inFileName> <numThreads>
-------------------------------------------------------------------

with Ada.Text_IO,            -- string output
     Ada.Integer_Text_IO,    -- integer output
     Ada.Command_Line,       -- Argument()
     Ada.Real_Time;          -- Clock, Time, etc.

use  Ada.Text_IO, Ada.Integer_Text_IO, Ada.Real_Time;

procedure tasked_array_sum is

   package Long_IO is new Integer_IO(Long_Integer); use Long_IO;

   type Int_Array is array (Integer range <>) of Long_Integer;
   type Int_Array_Pointer is access Int_Array;

   Values: Int_Array_Pointer;
   Total:  Long_Integer;
   Start_Time, Stop_Time:  Ada.Real_Time.Time;
   Time_Required: Duration;
   
   function Sum_Slice(V: in Int_Array_Pointer; Start, Stop : in Integer) return Long_Integer;

   task type Array_Adder_Task is 
      entry sum(ID, Slice_Size: in Integer);
      entry report(Result: out Long_Integer);
   end;

   task body Array_Adder_Task is
      My_Total : Long_Integer := 0;
      My_Start_Index, My_Stop_Index : Integer;
   begin
         accept sum(ID, Slice_Size: in Integer) do
            My_Start_Index := ID * Slice_Size;
            My_Stop_Index := My_Start_Index + Slice_Size - 1;
         end; 

         My_Total := Sum_Slice(Values, 
                                My_Start_Index,
                                My_Stop_Index);

         accept report(Result: out Long_Integer) do
            Result := My_Total;
         end; 
   end Array_Adder_Task;

   procedure Check_Command_Line is
   begin
      if Ada.Command_Line.Argument_Count /= 2 then
         New_line;
         Put("Usage: array_sum <inFileName> <numTasks>");
         New_line; New_line;
         Ada.Command_Line.Set_Exit_Status(1);
      end if;
   end Check_Command_Line;

   procedure Read_File(File_Name: in String; V: in out Int_Array_Pointer) is
      Size:   Integer;
      Number_File : File_Type;
   begin
     Open(File => Number_File,
            Mode => In_File,
            Name => File_Name); 
      Get(Number_File, Size);
      V := new Int_Array(0..Size-1);
      for i in V'Range loop
         Get(Number_File, V(i));
      end loop;
   end Read_File;

   function Sum_Slice(V: in Int_Array_Pointer; Start, Stop : in Integer) return Long_Integer is
      Partial_Sum: Long_Integer := 0;
   begin
      for i in Start..Stop loop
         Partial_Sum := Partial_Sum + V(i) ;
      end loop;
      return Partial_Sum;
   end Sum_Slice;

   function Sum_In_Parallel(Values: in Int_Array_Pointer;
                            Num_Tasks: in Integer) return Long_Integer is
      Partial_Result, Result: Long_Integer := 0;
      Leftovers, Slice_Size, Start, Stop : Integer;

      type Task_Array is array(Integer range <>) of Array_Adder_Task;
      type Task_Array_Ptr is access Task_Array;
      Adder_Tasks : Task_Array_Ptr;

   begin
      Slice_Size := Values'Length / Num_Tasks;
      Adder_Tasks := new Task_Array(1..Num_Tasks-1);

      for task_ID in 1..NUM_TASKS-1 loop
         Adder_Tasks(task_ID).sum(task_ID, Slice_Size);
      end loop;

      Result := Sum_Slice(Values, 0, Slice_Size-1);

      Leftovers := Values'Length REM Num_Tasks;

      if ( Leftovers > 0 ) then
         Start := Values'Length - Leftovers;
         Stop := Values'Length - 1;
         for i in Start..Stop loop
            Result := Result + Values(i);
         end loop;
      end if;

      for task_ID in 1..Num_Tasks-1 loop
         Adder_Tasks(task_ID).report(Partial_Result);
         Result := Result + Partial_Result;
      end loop;

      return Result;
   end Sum_In_Parallel;

   procedure Display(result: in Long_Integer; Compute_Time: in Duration) is
   begin
      New_line;
      Put("The sum is ");
      Put(Total);
      New_line;
      Put(" and computing it took "); 
      Put(Duration'Image (Compute_Time));
      Put(" secs.");
      New_line; New_line;
   end Display;


begin
   Check_Command_Line;
   Read_File( Ada.Command_Line.Argument(1), Values );
   Start_Time := Clock;
   Total := Sum_in_parallel(Values, Integer'Value(Ada.Command_Line.Argument(2)) );
   Stop_Time := Clock;
   Time_Required := Ada.Real_Time.To_Duration(Stop_Time - Start_Time);
   Display(Total, Time_Required);
end tasked_array_sum;

cab35@kay:~/Documents/spring-2014/11/ada$ make
make: Nothing to be done for `all'.
cab35@kay:~/Documents/spring-2014/11/ada$ ./tasked_array_sum ../numbers/1000000numbers.txt 1

The sum is            500869305
 and computing it took  0.002492000 secs.

cab35@kay:~/Documents/spring-2014/11/ada$ ./tasked_array_sum ../numbers/1000000numbers.txt 1[K4

The sum is            500869305
 and computing it took  0.001392000 secs.

cab35@kay:~/Documents/spring-2014/11/ada$ ^C

Script done on Thu 01 May 2014 11:50:57 AM EDT
Script started on Thu 01 May 2014 10:38:09 AM EDT
cab35@kay:~/Documents/spring-2014/11/ruby$ cat threaded_array_sum.rb 
# array_sum.rb sums the values in an array
#
# Begun by: Prof. Adams, for CS 214 at Calvin College.
# Completed by:Charles Blum
# Date:30 April 2014
#
# Usage: ruby array_sum.rb <inFileName>
######################################################

require 'thread'	#exclusive

# make certain the input file was specified on the command-line
def checkCommandLine
  if ARGV.length != 2
     puts "\nUsage: sum <fileName> <numThreads>\n\n"
     exit(1)
  end
end

# return: an array containing the values from the file
#  whose name was specified on the command-line
def readFile
   strArray = IO.readlines( ARGV[0] )
   intArray = Array.new( Integer(strArray[0]) )
   for i in 2..strArray.size
      if  !strArray[i].nil?
         intArray[i-2] = Integer( strArray[i].chomp )
      end
   end
   intArray 
end

# Return: the sum of the values 
def sumSlice(values, id, sliceSize)
   start = id * sliceSize
   stop = start + sliceSize - 1
   myTotal = 0
   for i in start..stop
      myTotal += values[i]
   end
   myTotal
end

def sumInParallel(values, numThreads)
  sliceSize = values.size / numThreads
  threadArray = Array.new( numThreads )
  result = 0

  for i in 1..numThreads-1
     threadArray[i] = Thread.new { 
        id = Thread.current[:id]
        myTotal = sumSlice(values, id, sliceSize)
        Thread.exclusive {
           result += myTotal
        }
      }
   threadArray[i][:id]=i
   end

   myTotal  = sumSlice(values, 0, sliceSize)

   leftovers = values.size % numThreads
   if leftovers > 0
      for i in values.size-leftovers..values.size-1
         myTotal += values[i]
      end
   end

   Thread.exclusive {
      result += myTotal
   }

   for i in 1..numThreads-1
      threadArray[i].join
   end

   result
end

def main
   checkCommandLine
   values = readFile
   startTime = Time.now
   total = sumInParallel( values, Integer(ARGV[1]) )
   endTime = Time.now
   interval = (endTime - startTime).to_f
   puts "\nThe sum is #{total}\n"
   printf(" and computing it took %.9f seconds.\n\n", interval)
end

main

cab35@kay:~/Documents/spring-2014/11/ruby$ ruby ./[K[Kthreaded_array_sum.rb ../numbers/10000001[Knumbers.txt 1

The sum is 500869305
 and computing it took 0.053650697 seconds.

cab35@kay:~/Documents/spring-2014/11/ruby$ ruby threaded_array_sum.rb ../numbers/1000000numbers.txt 1[K4

The sum is 500869305
 and computing it took 0.099087894 seconds.

cab35@kay:~/Documents/spring-2014/11/ruby$ exit

Script done on Thu 01 May 2014 10:38:43 AM EDT
