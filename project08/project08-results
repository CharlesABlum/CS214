Script started on Tue 15 Apr 2014 12:48:02 PM EDT
]0;theo@theo-VBox: ~/Documents/spring-2014/project08/adatheo@theo-VBox:~/Documents/spring-2014/project08/ada$ cat temperature.ads temperaature.adb temperature_test.adb Makefile 
-- temperature.ads declares the Temperature Type and its     
-- operations.
--
-- Begun by: Charles Blum, 214 at Calvin College.
-- Completed by: Charles Blum
-- Date: 14 April 2014
----------------------------------------------------------
package Temperature is
  type Temp is private; 
   
  procedure Init(aTemp: out Temp; aValue : in Float; aUnit : in Character);
  function getValue( aTemp: in Temp ) return Float;
  function getUnit( aTemp : in Temp ) return Character;
  procedure setValue( aTemp : in out Temp; aValue : in Float );
  procedure setUnit( aTemp : in out Temp; aUnit : in Character );
  procedure getF( Tp : in out Temp);
  procedure getC( Tp : in out Temp);
  procedure getK( Tp : in out Temp);
  procedure getR( Tp : in out Temp);
  function toString( aTemp : in Temp ) return String;
  procedure raiseTemp( Tp : in out Temp; degrees : in Float );
  procedure lowerTemp( TP : in out Temp; degrees : in Float );
  function equals( Tp1, Tp2 : in Temp ) return Boolean;
  function lessThan( Tp1, Tp2 : in Temp ) return Boolean;
  function isValid( value : Float; unitChar : Character ) return Boolean;
  procedure readIn( Tp : out Temp );
  procedure writeOut( Tp : in Temp );
  
private   
  type Temp is
      record
	 --Fahrenheit: F = 9C/5 + 32
	 --Rankine: R = F + 459.67
	 --Celcius: C = 5(F - 32)/9
	 --Kelvin: K = C + 273.15
         value : Float;
         unit  : Character;
      end record;

  aTemp : Temp ;
end Temperature;
-- temperature.adb defines operations for the
-- Temperature type.
--
-- Begun by: Charles Blum, 214 at Calvin College.
-- Completed by: Charles Blum
-- Date: 14 April 2014
---------------------------------------------------------

with Ada.Text_IO, Ada.Float_Text_IO, Ada.Strings.Fixed, Ada.Characters.Handling;
use  Ada.Text_IO, Ada.Float_Text_IO, Ada.Strings.Fixed, Ada.Characters.Handling;

package body Temperature is

  ---------------------------------------------
  -- constructor for the Temperature type
  ---------------------------------------------
  procedure Init(aTemp: out Temp; aValue : in Float; aUnit : in Character) is
  begin
    if isValid( aValue, aUnit ) then
      setValue( aTemp, aValue );
      setUnit( aTemp, aUnit );
    end if;  
  end Init;

  
  ---------------------------------------------
  -- Getters and setters for the Temperature
  -- Type.  Note these are simple setters and
  -- do not handle mis-conversion.  the getX()
  -- functions handle proper conversion and
  -- should be used instead.
  ---------------------------------------------
  function getValue( aTemp: in Temp ) return Float is
  begin 
    return aTemp.value;
  end getValue;

  function getUnit( aTemp : in Temp ) return Character is 
  begin 
    return aTemp.unit;
  end getUnit;

  procedure setValue( aTemp : in out Temp; aValue : in Float ) is
  begin
    aTemp.value := aValue;
  end setValue;
  
  procedure setUnit( aTemp : in out Temp; aUnit : in Character ) is
  begin
    aTemp.unit := aUnit;
  end setUnit;

  ---------------------------------------------
  -- getX() takes in an arbitrary Temperature
  -- and returns a Temperature in X instead.
  -- A valid Temp is already assumed since it
  -- is checked on creation.
  ---------------------------------------------
  procedure getF( Tp : in out Temp) is
  val : Float := getValue(Tp);
  begin
    if getUnit(Tp) = 'R' then
      setValue( Tp, ( val - 459.67) );
      setUnit( Tp, 'F');
    elsif (getUnit(Tp) = 'C') then
      setValue( Tp, (1.8 * val + 32.0) );
      setUnit( Tp, 'F');
    elsif (getUnit(Tp) = 'K') then
      setValue( Tp, (1.8 * val - 459.67) );
      setUnit( Tp, 'F');
    end if;
  end getF;
  
  procedure getC( Tp : in out Temp) is
  val : Float := getValue(Tp);
  begin
    if getUnit(Tp) = 'K' then
      setValue( Tp, (val - 273.15) );
      setUnit( Tp, 'C');
    elsif (getUnit(Tp) = 'F') then
      setValue( Tp, (5.0/9.0 * (val - 32.0)) );
      setUnit( Tp, 'C');
    elsif (getUnit(Tp) = 'R') then
      setValue( Tp, (5.0/9.0 * (val - 459.67)) );
      setUnit( Tp, 'C');
    end if;
  end getC;

  procedure getK( Tp : in out Temp) is
  val : Float := getValue(Tp);
  begin
    if getUnit(Tp) = 'C' then
      setValue( Tp, (val + 273.15) );
      setUnit( Tp, 'K');
    elsif (getUnit(Tp) = 'F') then
      setValue( Tp, (5.0/9.0 * (val + 459.67)) );
      setUnit( Tp, 'K');
    elsif (getUnit(Tp) = 'R') then
      setValue( Tp, (5.0/9.0 * val) );
      setUnit( Tp, 'K');
    end if;
  end getK;

  procedure getR( Tp : in out Temp) is
  val : Float := getValue(Tp);
  begin
    if getUnit(Tp) = 'C' then
      setValue( Tp, (1.8 * (val + 273.15)) );
      setUnit( Tp, 'R');
    elsif (getUnit(Tp) = 'K') then
      setValue( Tp, (1.8 * val) );
      setUnit( Tp, 'R');
    elsif (getUnit(Tp) = 'F') then
      setValue( Tp, (val + 491.67)  );
      setUnit( Tp, 'R');
    end if;
  end getR;

  ---------------------------------------------
  -- toString returns a given Temperature as 
  -- a string for easy output.
  ---------------------------------------------
  function toString( aTemp : in Temp ) return String is
  begin
    return Float'Image(aTemp.value) & " " & aTemp.unit;
  end toString;

  ---------------------------------------------
  -- raiseTemp() takes a Temp and a given 
  -- change and applies it to the Temperature
  ---------------------------------------------
  procedure raiseTemp( Tp : in out Temp; degrees : in Float ) is
  begin
    if degrees < 0.0 then
      lowerTemp( Tp, -1.0 * degrees );
    else
      setValue( Tp, getValue(Tp) + degrees );
    end if;
  end raiseTemp;

  ---------------------------------------------
  -- lowerTemp() takes a Temperature and a 
  -- given change in Temp, checks to see if the
  -- resulting Temp is valid & then changes it.
  ---------------------------------------------
  procedure lowerTemp( TP : in out Temp; degrees : in Float ) is
  val : Float := 0.0;
  begin
    if degrees < 0.0 then
      raiseTemp( Tp, -1.0 * degrees );
    else
      val := Tp.value - degrees;
      if isValid( val, Tp.unit ) then
        setValue( Tp, val );
      --else
        --Temp too low, don't change
      end if;
    end if;
  end lowerTemp;

  ---------------------------------------------
  -- Checks 2 Temps to see if they are similar.
  -- Does not need to be the  same unit system.
  -- Can be destructive since the Tp is not 
  -- a reference or returned.
  ---------------------------------------------
  function equals( Tp1, Tp2 : in Temp ) return Boolean is
  t1, t2 : Temp;
  begin
    t1 := Tp1;
    t2 := Tp2;
    getK( t1 );
    getk( t2 ); 
    if t1.value = t2.value then
      return true;
    else
      return false;
    end if;
  end equals;

  ---------------------------------------------
  -- Checks 2 Temperatures to see if the first
  -- is less than the second.
  -- Can be destructive since the Tp is not 
  -- a reference or returned.
  ---------------------------------------------
  function lessThan( Tp1, Tp2 : in Temp ) return Boolean is
  t1, t2 : Temp;
  begin 
    t1 := Tp1;
    t2 := Tp2;
    getK( t1 );
    getK( t2 );
    if t1.value < t2.value then
      return true;
    else
      return false;
    end if;
  end lessThan;

  ---------------------------------------------
  -- Determines if the value and unit system 
  -- make sense.  If they don't returns false.
  -- Valid Temperature Ranges:
  -- Fahrenheit:	-459.67 to INF
  -- Rankine:		   0.00 to INF
  -- Celcius:		-273.15 to INF
  -- Kelvin:		   0.00 to INF
  ---------------------------------------------
  function isValid( value : Float; unitChar : Character ) return Boolean is
  unit : Character := unitChar;
  begin
    if unit /= 'F' and unit /= 'R' and unit /= 'C' and unit /= 'K' then
      return false;
    elsif ( value < 0.0 and ( unit = 'K' or unit = 'R' )) then
      return false;
    elsif ( value < -273.15 and unit = 'C' ) then
      return false;
    elsif ( value < -459.67 and unit = 'F' ) then
      return false;
    else
      return true;
    end if;
  end isValid;

  ---------------------------------------------
  -- readIn takes input from the user and  
  -- creates a Temperature.  It also checks to
  -- makes sure the input is valid, and if not
  -- asks again.
  ---------------------------------------------
  procedure readIn( Tp : out Temp ) is
  STR_LEN : String := "             ";
  str, str1, str2 : String := STR_LEN;
  num : Natural := 0;
  val : Float := -460.0;
  unit : Character := 'F';  
  begin
    Put_Line("The format is xxx.xx A where xxx.xx is a real value");
    Put_Line("and A is a character representing a unit system (F, R, C, K)");

    loop
      Put("Enter here: ");      
      Get_Line(str, num);
      move(str(str'First..(num - 1)), str1);
      move(str(str'First+(num-1)..str'Last), str2);
      val := Float'Value(str1);
      unit := To_Upper(str2(str2'First));
      exit when ( isValid( val, unit ) = true );
      
      Put("Value and unit do not constitute a valid");
      Put_Line("Temperature. Please try again.");
      str := STR_LEN;
    end loop;
    
    Init ( Tp, val, unit );
  end readIn;

  ---------------------------------------------
  -- writeOut takes a Temperature and prints 
  -- it to the terminal in all units systems
  -- for convenient output.
  -- Order is: F, C, R, K
  ---------------------------------------------
  procedure writeOut( Tp : in Temp ) is
  tF, tC, tR, tK : Temp;
  begin
    tF := Tp; getF(tF);
    tC := Tp; getC(tC);
    tR := Tp; getR(tR);
    tK := Tp; getK(tK);
   
    New_Line; 
    Put(toString(tF) & "  ");
    Put(toString(tC) & "  ");
    Put(toString(tR) & "  ");
    Put(toString(tK) & "  ");
  end writeOut;

end Temperature;
-- temperature_test.adb tests the Temperature type.
--
-- Begun by: Charles Blum, 214 at Calvin College.
-- Completed by: Charles Blum
-- Date: 15 April 2014
---------------------------------------------------------

with Ada.Text_IO, Ada.Float_Text_IO, Temperature;
use  Ada.Text_IO, Ada.Float_Text_IO, Temperature;

---------------------------------------------------------
-- Input: baseTemp, a Temperature;
--        limitTemp, a Temperature; and
--        stepValue, a real.
-- Output: A table of Fahrenheit, Ranking, Celsius, and
--         Kelvin temperature values, beginning with
--	   baseTemp, ending with limitTemp, and having
--	   increments of stepValue. (Note: stepValue should
--         be assumed to have the same scale as baseTemp.)
---------------------------------------------------------
procedure temperature_test is

  baseTemp, limitTemp : Temperature.Temp;
  stepValue, loopBase, loopLimit : Float := 0.0;

begin
  Put_line("Enter a base Temperature:");
  readIn( baseTemp );
  
  Put_Line("Now enter a limit Temperature: ");
  readIn( limitTemp );
  Put("Now enter a stepValue: ");
  get(stepValue);

  while lessThan( baseTemp, limitTemp )
  loop
    writeOut( baseTemp );
    raiseTemp( baseTemp, stepValue );
  end loop;

end temperature_test;
# Makefile for GNAT (Ada) compilation

TARGET = temperature_test
PACKAGE = temperature

CC = gcc
CFLAGS = -c -gnata

$(TARGET): $(TARGET).ali $(PACKAGE).o
	gnatbind $(TARGET).ali
	gnatlink $(TARGET).ali

$(TARGET).ali: $(TARGET).adb $(PACKAGE).ads
	$(CC) $(CFLAGS) $(TARGET).adb

$(PACKAGE).o: $(PACKAGE).adb $(PACKAGE).ads
	$(CC) $(CFLAGS) $(PACKAGE).adb

clean:
	rm -f $(TARGET) *~ *# *.o *.ali *.c

]0;theo@theo-VBox: ~/Documents/spring-2014/project08/adatheo@theo-VBox:~/Documents/spring-2014/project08/ada$ make
make: `temperature_test' is up to date.
]0;theo@theo-VBox: ~/Documents/spring-2014/project08/adatheo@theo-VBox:~/Documents/spring-2014/project08/ada$ ./temperature_test 
Enter a base Temperature:
The format is xxx.xx A where xxx.xx is a real value
and A is a character representing a unit system (F, R, C, K)
Enter here: 0f
Now enter a limit Temperature: 
The format is xxx.xx A where xxx.xx is a real value
and A is a character representing a unit system (F, R, C, K)
Enter here: 100c
Now enter a stepValue: 2.5

 0.00000E+00 F  -1.77778E+01 C   4.91670E+02 R   2.55372E+02 K  
 2.50000E+00 F  -1.63889E+01 C   4.94170E+02 R   2.56761E+02 K  
 5.00000E+00 F  -1.50000E+01 C   4.96670E+02 R   2.58150E+02 K  
 7.50000E+00 F  -1.36111E+01 C   4.99170E+02 R   2.59539E+02 K  
 1.00000E+01 F  -1.22222E+01 C   5.01670E+02 R   2.60928E+02 K  
 1.25000E+01 F  -1.08333E+01 C   5.04170E+02 R   2.62317E+02 K  
 1.50000E+01 F  -9.44444E+00 C   5.06670E+02 R   2.63706E+02 K  
 1.75000E+01 F  -8.05556E+00 C   5.09170E+02 R   2.65094E+02 K  
 2.00000E+01 F  -6.66667E+00 C   5.11670E+02 R   2.66483E+02 K  
 2.25000E+01 F  -5.27778E+00 C   5.14170E+02 R   2.67872E+02 K  
 2.50000E+01 F  -3.88889E+00 C   5.16670E+02 R   2.69261E+02 K  
 2.75000E+01 F  -2.50000E+00 C   5.19170E+02 R   2.70650E+02 K  
 3.00000E+01 F  -1.11111E+00 C   5.21670E+02 R   2.72039E+02 K  
 3.25000E+01 F   2.77778E-01 C   5.24170E+02 R   2.73428E+02 K  
 3.50000E+01 F   1.66667E+00 C   5.26670E+02 R   2.74817E+02 K  
 3.75000E+01 F   3.05556E+00 C   5.29170E+02 R   2.76206E+02 K  
 4.00000E+01 F   4.44444E+00 C   5.31670E+02 R   2.77594E+02 K  
 4.25000E+01 F   5.83333E+00 C   5.34170E+02 R   2.78983E+02 K  
 4.50000E+01 F   7.22222E+00 C   5.36670E+02 R   2.80372E+02 K  
 4.75000E+01 F   8.61111E+00 C   5.39170E+02 R   2.81761E+02 K  
 5.00000E+01 F   1.00000E+01 C   5.41670E+02 R   2.83150E+02 K  
 5.25000E+01 F   1.13889E+01 C   5.44170E+02 R   2.84539E+02 K  
 5.50000E+01 F   1.27778E+01 C   5.46670E+02 R   2.85928E+02 K  
 5.75000E+01 F   1.41667E+01 C   5.49170E+02 R   2.87317E+02 K  
 6.00000E+01 F   1.55556E+01 C   5.51670E+02 R   2.88706E+02 K  
 6.25000E+01 F   1.69444E+01 C   5.54170E+02 R   2.90094E+02 K  
 6.50000E+01 F   1.83333E+01 C   5.56670E+02 R   2.91483E+02 K  
 6.75000E+01 F   1.97222E+01 C   5.59170E+02 R   2.92872E+02 K  
 7.00000E+01 F   2.11111E+01 C   5.61670E+02 R   2.94261E+02 K  
 7.25000E+01 F   2.25000E+01 C   5.64170E+02 R   2.95650E+02 K  
 7.50000E+01 F   2.38889E+01 C   5.66670E+02 R   2.97039E+02 K  
 7.75000E+01 F   2.52778E+01 C   5.69170E+02 R   2.98428E+02 K  
 8.00000E+01 F   2.66667E+01 C   5.71670E+02 R   2.99817E+02 K  
 8.25000E+01 F   2.80556E+01 C   5.74170E+02 R   3.01206E+02 K  
 8.50000E+01 F   2.94444E+01 C   5.76670E+02 R   3.02594E+02 K  
 8.75000E+01 F   3.08333E+01 C   5.79170E+02 R   3.03983E+02 K  
 9.00000E+01 F   3.22222E+01 C   5.81670E+02 R   3.05372E+02 K  
 9.25000E+01 F   3.36111E+01 C   5.84170E+02 R   3.06761E+02 K  
 9.50000E+01 F   3.50000E+01 C   5.86670E+02 R   3.08150E+02 K  
 9.75000E+01 F   3.63889E+01 C   5.89170E+02 R   3.09539E+02 K  
 1.00000E+02 F   3.77778E+01 C   5.91670E+02 R   3.10928E+02 K  
 1.02500E+02 F   3.91667E+01 C   5.94170E+02 R   3.12317E+02 K  
 1.05000E+02 F   4.05556E+01 C   5.96670E+02 R   3.13706E+02 K  
 1.07500E+02 F   4.19444E+01 C   5.99170E+02 R   3.15094E+02 K  
 1.10000E+02 F   4.33333E+01 C   6.01670E+02 R   3.16483E+02 K  
 1.12500E+02 F   4.47222E+01 C   6.04170E+02 R   3.17872E+02 K  
 1.15000E+02 F   4.61111E+01 C   6.06670E+02 R   3.19261E+02 K  
 1.17500E+02 F   4.75000E+01 C   6.09170E+02 R   3.20650E+02 K  
 1.20000E+02 F   4.88889E+01 C   6.11670E+02 R   3.22039E+02 K  
 1.22500E+02 F   5.02778E+01 C   6.14170E+02 R   3.23428E+02 K  
 1.25000E+02 F   5.16667E+01 C   6.16670E+02 R   3.24817E+02 K  
 1.27500E+02 F   5.30556E+01 C   6.19170E+02 R   3.26206E+02 K  
 1.30000E+02 F   5.44444E+01 C   6.21670E+02 R   3.27594E+02 K  
 1.32500E+02 F   5.58333E+01 C   6.24170E+02 R   3.28983E+02 K  
 1.35000E+02 F   5.72222E+01 C   6.26670E+02 R   3.30372E+02 K  
 1.37500E+02 F   5.86111E+01 C   6.29170E+02 R   3.31761E+02 K  
 1.40000E+02 F   6.00000E+01 C   6.31670E+02 R   3.33150E+02 K  
 1.42500E+02 F   6.13889E+01 C   6.34170E+02 R   3.34539E+02 K  
 1.45000E+02 F   6.27778E+01 C   6.36670E+02 R   3.35928E+02 K  
 1.47500E+02 F   6.41667E+01 C   6.39170E+02 R   3.37317E+02 K  
 1.50000E+02 F   6.55556E+01 C   6.41670E+02 R   3.38706E+02 K  
 1.52500E+02 F   6.69445E+01 C   6.44170E+02 R   3.40094E+02 K  
 1.55000E+02 F   6.83333E+01 C   6.46670E+02 R   3.41483E+02 K  
 1.57500E+02 F   6.97222E+01 C   6.49170E+02 R   3.42872E+02 K  
 1.60000E+02 F   7.11111E+01 C   6.51670E+02 R   3.44261E+02 K  
 1.62500E+02 F   7.25000E+01 C   6.54170E+02 R   3.45650E+02 K  
 1.65000E+02 F   7.38889E+01 C   6.56670E+02 R   3.47039E+02 K  
 1.67500E+02 F   7.52778E+01 C   6.59170E+02 R   3.48428E+02 K  
 1.70000E+02 F   7.66667E+01 C   6.61670E+02 R   3.49817E+02 K  
 1.72500E+02 F   7.80556E+01 C   6.64170E+02 R   3.51206E+02 K  
 1.75000E+02 F   7.94445E+01 C   6.66670E+02 R   3.52594E+02 K  
 1.77500E+02 F   8.08333E+01 C   6.69170E+02 R   3.53983E+02 K  
 1.80000E+02 F   8.22222E+01 C   6.71670E+02 R   3.55372E+02 K  
 1.82500E+02 F   8.36111E+01 C   6.74170E+02 R   3.56761E+02 K  
 1.85000E+02 F   8.50000E+01 C   6.76670E+02 R   3.58150E+02 K  
 1.87500E+02 F   8.63889E+01 C   6.79170E+02 R   3.59539E+02 K  
 1.90000E+02 F   8.77778E+01 C   6.81670E+02 R   3.60928E+02 K  
 1.92500E+02 F   8.91667E+01 C   6.84170E+02 R   3.62317E+02 K  
 1.95000E+02 F   9.05556E+01 C   6.86670E+02 R   3.63706E+02 K  
 1.97500E+02 F   9.19445E+01 C   6.89170E+02 R   3.65094E+02 K  
 2.00000E+02 F   9.33333E+01 C   6.91670E+02 R   3.66483E+02 K  
 2.02500E+02 F   9.47222E+01 C   6.94170E+02 R   3.67872E+02 K  
 2.05000E+02 F   9.61111E+01 C   6.96670E+02 R   3.69261E+02 K  
 2.07500E+02 F   9.75000E+01 C   6.99170E+02 R   3.70650E+02 K  
 2.10000E+02 F   9.88889E+01 C   7.01670E+02 R   3.72039E+02 K  
]0;theo@theo-VBox: ~/Documents/spring-2014/project08/adatheo@theo-VBox:~/Documents/spring-2014/project08/ada$ exit

Script done on Tue 15 Apr 2014 12:48:31 PM EDT
Script started on Sat 19 Apr 2014 02:14:29 PM EDT
]0;theo@theo-VBox: ~/Documents/spring-2014/project08/e-lisptheo@theo-VBox:~/Documents/spring-2014/project08/e-lisp$ cat Temperature.el temp..el temp.out
;;; Temperature.el simulates an e-LISP Temperatyre type
;;;  and operations on that type.
;;;
;;; Begun by: Charles Blum, for CS 214 at Calvin College.
;;; Completed by: Charles Blum
;;; Date: 15 April 2014
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Temperature constructs a temp from a real number;;
;;; and a character representing the units          ;;
;;; Receive: value, a real and unit, a strings.     ;;
;;; Return: the tuple (value unit).                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Temperature(value unit)
  (list (round2 value) unit))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getters and setters for the Temperature object      ;;
;;; getters Return: the appropiate entry of Temperature ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getValue(theTemp)
  (car theTemp))

(defun getUnit(theTemp)
  (car (cdr theTemp)))

(defun setValue (theTemp value)
  (setcar theTemp value)
  theTemp)

(defun setUnit(theTemp unit)
  (setf (car (cdr theTemp)) unit)
  theTemp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toX converts a Temperature to the X unit system.    ;;
;;; unit systems are:                                   ;;
;;; Fahrenheit (F)                                      ;;
;;; Rankine    (R)                                      ;;
;;; Celcius    (C)                                      ;;
;;; Kelvin     (K)                                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun toF(theTemp)
  (if (char-equal (getUnit theTemp) ?C)
      (progn (setUnit theTemp ?F)
	     (setValue theTemp (round2 (+ 32 (* 1.80 (getValue theTemp))))))
  (if (char-equal (getUnit theTemp) ?R)
      (progn (setUnit theTemp ?F)
	     (setValue theTemp (round2 (- (getValue theTemp) 459.67))))
  (if (char-equal (getUnit theTemp) ?K)
      (progn (setUnit theTemp ?F)
	     (setValue theTemp (round2 (- (* 1.80 (getValue theTemp)) 459.67))))
    )))
  theTemp)

(defun toC(theTemp)
  (if (char-equal (getUnit theTemp) ?F)
      (progn (setUnit theTemp ?C)
	     (setValue theTemp (round2 (* (/ 5.0 9.0) (- (getValue theTemp) 32.0)))))
  (if (char-equal (getUnit theTemp) ?R)
      (progn (setUnit theTemp ?C)
	     (setValue theTemp (round2 (-  (* (/ 5.0 9.0) (getValue theTemp)) 273.15))))
  (if (char-equal (getUnit theTemp) ?K)
      (progn (setUnit theTemp ?C)
	     (setValue theTemp (round2 (- (getValue theTemp) 273.15))))
    )))
  theTemp)

(defun toR(theTemp)
  (if (char-equal (getUnit theTemp) ?F)
      (progn (setUnit theTemp ?R)
	     (setValue theTemp (round2 (+ 459.67 (getValue theTemp)))))
  (if (char-equal (getUnit theTemp) ?C)
      (progn (setUnit theTemp ?R)
	     (setValue theTemp (round2 (+ 491.67 (* 1.80 (getValue theTemp))))))
  (if (char-equal (getUnit theTemp) ?K)
      (progn (setUnit theTemp ?R)
	     (setValue theTemp (round2 (* 1.80 (getValue theTemp)))))
  )))
  theTemp)

(defun toK(theTemp)
  (if (char-equal (getUnit theTemp) ?F)
      (progn (setUnit theTemp ?K)
	     (setValue theTemp (round2 (* (/ 5.0 9.0) (+ 459.67 (getValue theTemp))))))
  (if (char-equal (getUnit theTemp) ?C)
      (progn (setUnit theTemp ?K)
	     (setValue theTemp (round2  (+ 273.15 (getValue theTemp)))))
  (if (char-equal (getUnit theTemp) ?R)
      (progn (setUnit theTemp ?K)
	     (setValue theTemp (round2 (* (/ 5.0 9.0) (getValue theTemp)))))
  )))
  theTemp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; round drops everything after 2 decimal places.      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun round2(number)
  ;;(format "%0.2f" number)) convers to string, don't want that
  ;;(* 0.01 (fround (* 100.00 number))))
  (string-to-number (format "%0.2f" number)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toString convert a Temperature to a string          ;;
;;; for convenient output                               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun toString(theTemp)
  (concat (format "%7.2f" (getValue theTemp)) " " (char-to-string (getUnit theTemp))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; raiseTemp takes a Temperature and raises its value  ;;
;;; by step                                             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun raiseTemp(theTemp step)
  (if (< step 0.00)
      (lowerTemp theTemp step)
    (setValue theTemp (+ (getValue theTemp) step)))
  theTemp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lowerTemp takes a Temperature and lowers its value  ;;
;;; by step.  Before doing so it checks to make sure the;;
;;; new value is valid.                                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun lowerTemp(theTemp step)
  (if (< step 0.00)
      (raiseTemp theTemp (* step -1))
    (if (isValid (- (getValue theTemp) step) (getUnit theTemp))
	(setValue theTemp (- (getValue theTemp) step))))
  theTemp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; equals checks the equality between two Temperatures ;;
;;; and does so across unit systems.                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun equals(temp1 temp2)
  (let ((dlt1 (copy-sequence temp1))
	(dlt2 (copy-sequence temp2)))
    (toK dlt1)
    (toK dlt2)
    (= (getValue dlt1) (getValue dlt2))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lessThan checks to see if the value of temp1 < temp2;;
;;; and does so across unit systems.                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun lessThan(temp1 temp2)
  (let ((dlt1 (copy-sequence temp1))
	(dlt2 (copy-sequence temp2)))
    (toK dlt1)
    (toK dlt2)
    (< (getValue dlt1) (getValue dlt2))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; isValid checks the validity of a (value unit) tuple ;;
;;; in F: value > -459.67                               ;;
;;; in R: value >    0.00                               ;;
;;; in C: value > -273.15                               ;;
;;; in K: value >    0.00                               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun isValid(value unit)
  (if (or (or (char-equal unit ?F) (char-equal unit ?R))
           (or (char-equal unit ?C) (char-equal unit ?K)))
      (if (and (>= value 0.0) (or (char-equal unit ?K) (char-equal unit ?R)))
	  (setq valid t)
      (if (and (>= value -273.15) (char-equal unit ?C))
	  (setq valid t)
      (if (and (>= value -459.67) (char-equal unit ?F))
	  (setq valid t)
      (setq valid nil))))
  (setq valid nil))
  valid)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readIn reads in a Temperature from the user.        ;;
;;; It also checks the validity of the input            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun readIn(theTemp)
  (princ "The format is 'xxx.xx A' where xxx.xx is a real value\n" buf)
  (princ "and A is a character representing a unit system (F, C, R, K)\n" buf)

  ;; seed values for the loop
  (setq value -460.00)
  (setq unit ?F)
  (while (not (isValid value unit))
    (setq inTemp (upcase (read-from-minibuffer "Enter here: ")))
    (setq value (string-to-number inTemp))
    (setq unit (string-to-char (byte-to-string (aref inTemp (- (length inTemp) 1)))))
    (if (not (isValid value unit))
	(princ "Not a valid Temperature.  Please try again." buf)))
  (setValue theTemp value)
  (setUnit  theTemp unit)
  theTemp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; writeOut outputs a Temperature in a convenient form.;;
;;; Namely it outputs the value in all 4 unit systems.  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun writeOut(theTemp buf)
  (let ( (aTemp (copy-sequence theTemp)) )
    (princ (toString (toF aTemp)) buf) (princ ",\t" buf)
    (princ (toString (toC aTemp)) buf) (princ ",\t" buf) 
    (princ (toString (toR aTemp)) buf) (princ ",\t" buf)
    (princ (toString (toK aTemp)) buf) (princ "\n"  buf))
  theTemp);;; temp.el simulates and tests an e-LISP 
;;; Temperature type.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Charles Blum
;;; Date: 18 April 2014
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Load the Temperature module             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path  ".")
("." "/usr/share/emacs23/site-lisp/dictionaries-common" "/etc/emacs23" "/etc/emacs" "/usr/local/share/emacs/23.3/site-lisp" "/usr/local/share/emacs/site-lisp" "/usr/share/emacs/23.3/site-lisp" "/usr/share/emacs/23.3/site-lisp/dictionaries-common" "/usr/share/emacs/site-lisp" "/usr/share/emacs/23.3/leim" "/usr/share/emacs/23.3/lisp" "/usr/share/emacs/23.3/lisp/url" ...)

(load "Temperature.elc")
t

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; test the Temperature module             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun runTests(buf) 
  ;(require 'cl)
  (setq temp (Temperature 30 ?C))

  ;;Getters
  (assert (= (getValue temp) 30.00))
  (assert (char-equal (getUnit temp)  ?C))

  ;Setters
  (setValue temp -100.00)
  (setUnit temp ?F)
  (assert (= (getValue temp) -100.00))
  (assert (char-equal (getUnit temp) ?F))

  ;;Test Conversions
  ;;This runs through each conversion without repetition
  (princ "Testing Conversions..." buf) (terpri buf)
  (toC temp)
  (assert (= (getValue temp) -73.33))
  (assert (char-equal (getUnit temp) ?C))
  (toR temp)
  (assert (= (getValue temp) 359.68))
  (assert (char-equal (getUnit temp) ?R))
  (toK temp)
  (assert (= (getValue temp) 199.82))
  (assert (char-equal (getUnit temp) ?K))
  (toF temp)
  (assert (= (getValue temp) -99.99))
  (assert (char-equal (getUnit temp) ?F))

  (princ "Pass 1 Complete!" buf) (terpri buf)

  (toR temp)
  (assert (= (getValue temp) 359.68))
  (assert (char-equal (getUnit temp) ?R))
  (toC temp)
  (assert (= (getValue temp) -73.33))
  (assert (char-equal (getUnit temp) ?C))
  (toK temp)
  (assert (= (getValue temp) 199.82))
  (assert (char-equal (getUnit temp) ?K))
  (toR temp)
  (assert (= (getValue temp) 359.68))
  (assert (char-equal (getUnit temp) ?R))

  (princ "Pass 2 Complete!" buf) (terpri buf)

  (toF temp)
  (assert (= (getValue temp) -99.99))
  (assert (char-equal (getUnit temp) ?F))
  (toK temp)
  (assert (= (getValue temp) 199.82))
  (assert (char-equal (getUnit temp) ?K))
  (toC temp)
  (assert (= (getValue temp) -73.33))
  (assert (char-equal (getUnit temp) ?C))
  (toF temp)
  (assert (= (getValue temp) -99.99))
  (assert (char-equal (getUnit temp) ?F))

  (princ "Pass 3 Complete!" buf) (terpri buf)
  (princ "Conversions Passed!" buf) (terpri buf)

  ;; test isValid
  (princ "Testing isValid..." buf) (terpri buf)
  (assert (isValid -459.67 ?F))
  (assert (isValid -273.15 ?C))
  (assert (isValid    0.00 ?R))
  (assert (isValid    0.00 ?K))
  (assert (not (isValid -459.68 ?F)))
  (assert (not (isValid -273.16 ?C)))
  (assert (not (isValid   -0.01 ?R)))
  (assert (not (isValid   -0.01 ?K)))
  (princ "isValid Passed!" buf) (terpri buf)

  ;; test readIn
  (princ "testing readIn... writeOut..." buf) (terpri buf)
  (readIn temp)
  (writeOut temp buf)
  (princ "readIn Passed! writeOut Passed!" buf) (terpri buf)

  ;; test raising and lowering temp
  (princ "testing raiseTemp... lowerTemp..." buf) (terpri buf)
  (raiseTemp temp 25.0)
  (assert (= (getValue temp) 55.0))
  (lowerTemp temp 30.0)
  (assert (= (getValue temp) 25.0))
  (lowerTemp temp 500)
  (assert (= (getValue temp) 25.0))
  (princ "raiseTemp Passed! lowerTelp Passed!" buf) (terpri buf)

  ;; test equal and lessThan
  (princ "testing equal... lessThan..." buf) (terpri buf)
  (setq t1 (Temperature 30 ?C))
  (setq t2 (Temperature 86 ?F))
  (assert (equals t1 t2))
  (lowerTemp t1 3.0)
  (assert (lessThan t1 t2))
  (princ "equal Passed! lessThan Passed!" buf) (terpri buf)

  (princ "All Tests Passed!" buf) (terpri buf)
)
runTests

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; get input from user and print out a     ;;
;;; range of temperatures in all four units ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (require 'cl)
  (setq buf (switch-to-buffer-other-window "temp.out"))
  (runTests buf)

  (setq baseTemp (Temperature 0 ?F))
  (setq limitTemp (Temperature 100 ?F))
  (princ "Enter a base Temperature in the mini-buffer:\n" buf)
  (readIn baseTemp)
  (princ "Enter a limit Temperature in the mini-buffer:\n" buf)
  (readIn limitTemp)
  (setq stepValue (string-to-number 
		   (read-from-minibuffer "Now enter a value to step with: ")))
  (princ "Base Temperature is: " buf)
  (princ (toString baseTemp) buf) (terpri buf)
  (princ "Limit Temperature is: " buf)
  (princ (toString limitTemp) buf) (terpri buf)
  (princ "StepValue is: " buf)
  (princ stepValue buf) (terpri buf)

  (while (lessThan baseTemp limitTemp)
    (writeOut baseTemp buf)
    (raiseTemp baseTemp stepValue))
  (terpri buf)
)
t
Testing Conversions...
Pass 1 Complete!
Pass 2 Complete!
Pass 3 Complete!
Conversions Passed!
Testing isValid...
isValid Passed!
testing readIn... writeOut...
The format is 'xxx.xx A' where xxx.xx is a real value
and A is a character representing a unit system (F, C, R, K)
  86.00 F,	  30.00 C,	 545.67 R,	 303.15 K
readIn Passed! writeOut Passed!
testing raiseTemp... lowerTemp...
raiseTemp Passed! lowerTelp Passed!
testing equal... lessThan...
equal Passed! lessThan Passed!
All Tests Passed!
Enter a base Temperature in the mini-buffer:
The format is 'xxx.xx A' where xxx.xx is a real value
and A is a character representing a unit system (F, C, R, K)
Enter a limit Temperature in the mini-buffer:
The format is 'xxx.xx A' where xxx.xx is a real value
and A is a character representing a unit system (F, C, R, K)
Base Temperature is:    0.00 F
Limit Temperature is:  100.00 C
StepValue is: 2.5
   0.00 F,	 -17.78 C,	 459.67 R,	 255.37 K
   2.50 F,	 -16.39 C,	 462.17 R,	 256.76 K
   5.00 F,	 -15.00 C,	 464.67 R,	 258.15 K
   7.50 F,	 -13.61 C,	 467.17 R,	 259.54 K
  10.00 F,	 -12.22 C,	 469.67 R,	 260.93 K
  12.50 F,	 -10.83 C,	 472.18 R,	 262.32 K
  15.00 F,	  -9.44 C,	 474.68 R,	 263.71 K
  17.50 F,	  -8.06 C,	 477.16 R,	 265.09 K
  20.00 F,	  -6.67 C,	 479.66 R,	 266.48 K
  22.50 F,	  -5.28 C,	 482.17 R,	 267.87 K
  25.00 F,	  -3.89 C,	 484.67 R,	 269.26 K
  27.50 F,	  -2.50 C,	 487.17 R,	 270.65 K
  30.00 F,	  -1.11 C,	 489.67 R,	 272.04 K
  32.50 F,	   0.28 C,	 492.17 R,	 273.43 K
  35.00 F,	   1.67 C,	 494.68 R,	 274.82 K
  37.50 F,	   3.06 C,	 497.18 R,	 276.21 K
  40.00 F,	   4.44 C,	 499.66 R,	 277.59 K
  42.50 F,	   5.83 C,	 502.16 R,	 278.98 K
  45.00 F,	   7.22 C,	 504.67 R,	 280.37 K
  47.50 F,	   8.61 C,	 507.17 R,	 281.76 K
  50.00 F,	  10.00 C,	 509.67 R,	 283.15 K
  52.50 F,	  11.39 C,	 512.17 R,	 284.54 K
  55.00 F,	  12.78 C,	 514.67 R,	 285.93 K
  57.50 F,	  14.17 C,	 517.18 R,	 287.32 K
  60.00 F,	  15.56 C,	 519.68 R,	 288.71 K
  62.50 F,	  16.94 C,	 522.16 R,	 290.09 K
  65.00 F,	  18.33 C,	 524.66 R,	 291.48 K
  67.50 F,	  19.72 C,	 527.17 R,	 292.87 K
  70.00 F,	  21.11 C,	 529.67 R,	 294.26 K
  72.50 F,	  22.50 C,	 532.17 R,	 295.65 K
  75.00 F,	  23.89 C,	 534.67 R,	 297.04 K
  77.50 F,	  25.28 C,	 537.17 R,	 298.43 K
  80.00 F,	  26.67 C,	 539.68 R,	 299.82 K
  82.50 F,	  28.06 C,	 542.18 R,	 301.21 K
  85.00 F,	  29.44 C,	 544.66 R,	 302.59 K
  87.50 F,	  30.83 C,	 547.16 R,	 303.98 K
  90.00 F,	  32.22 C,	 549.67 R,	 305.37 K
  92.50 F,	  33.61 C,	 552.17 R,	 306.76 K
  95.00 F,	  35.00 C,	 554.67 R,	 308.15 K
  97.50 F,	  36.39 C,	 557.17 R,	 309.54 K
 100.00 F,	  37.78 C,	 559.67 R,	 310.93 K
 102.50 F,	  39.17 C,	 562.18 R,	 312.32 K
 105.00 F,	  40.56 C,	 564.68 R,	 313.71 K
 107.50 F,	  41.94 C,	 567.16 R,	 315.09 K
 110.00 F,	  43.33 C,	 569.66 R,	 316.48 K
 112.50 F,	  44.72 C,	 572.17 R,	 317.87 K
 115.00 F,	  46.11 C,	 574.67 R,	 319.26 K
 117.50 F,	  47.50 C,	 577.17 R,	 320.65 K
 120.00 F,	  48.89 C,	 579.67 R,	 322.04 K
 122.50 F,	  50.28 C,	 582.17 R,	 323.43 K
 125.00 F,	  51.67 C,	 584.68 R,	 324.82 K
 127.50 F,	  53.06 C,	 587.18 R,	 326.21 K
 130.00 F,	  54.44 C,	 589.66 R,	 327.59 K
 132.50 F,	  55.83 C,	 592.16 R,	 328.98 K
 135.00 F,	  57.22 C,	 594.67 R,	 330.37 K
 137.50 F,	  58.61 C,	 597.17 R,	 331.76 K
 140.00 F,	  60.00 C,	 599.67 R,	 333.15 K
 142.50 F,	  61.39 C,	 602.17 R,	 334.54 K
 145.00 F,	  62.78 C,	 604.67 R,	 335.93 K
 147.50 F,	  64.17 C,	 607.18 R,	 337.32 K
 150.00 F,	  65.56 C,	 609.68 R,	 338.71 K
 152.50 F,	  66.94 C,	 612.16 R,	 340.09 K
 155.00 F,	  68.33 C,	 614.66 R,	 341.48 K
 157.50 F,	  69.72 C,	 617.17 R,	 342.87 K
 160.00 F,	  71.11 C,	 619.67 R,	 344.26 K
 162.50 F,	  72.50 C,	 622.17 R,	 345.65 K
 165.00 F,	  73.89 C,	 624.67 R,	 347.04 K
 167.50 F,	  75.28 C,	 627.17 R,	 348.43 K
 170.00 F,	  76.67 C,	 629.68 R,	 349.82 K
 172.50 F,	  78.06 C,	 632.18 R,	 351.21 K
 175.00 F,	  79.44 C,	 634.66 R,	 352.59 K
 177.50 F,	  80.83 C,	 637.16 R,	 353.98 K
 180.00 F,	  82.22 C,	 639.67 R,	 355.37 K
 182.50 F,	  83.61 C,	 642.17 R,	 356.76 K
 185.00 F,	  85.00 C,	 644.67 R,	 358.15 K
 187.50 F,	  86.39 C,	 647.17 R,	 359.54 K
 190.00 F,	  87.78 C,	 649.67 R,	 360.93 K
 192.50 F,	  89.17 C,	 652.18 R,	 362.32 K
 195.00 F,	  90.56 C,	 654.68 R,	 363.71 K
 197.50 F,	  91.94 C,	 657.16 R,	 365.09 K
 200.00 F,	  93.33 C,	 659.66 R,	 366.48 K
 202.50 F,	  94.72 C,	 662.17 R,	 367.87 K
 205.00 F,	  96.11 C,	 664.67 R,	 369.26 K
 207.50 F,	  97.50 C,	 667.17 R,	 370.65 K
 210.00 F,	  98.89 C,	 669.67 R,	 372.04 K


]0;theo@theo-VBox: ~/Documents/spring-2014/project08/e-lisptheo@theo-VBox:~/Documents/spring-2014/project08/e-lisp$ exit

Script done on Sat 19 Apr 2014 02:14:41 PM EDT
Script started on Tue 15 Apr 2014 05:51:36 PM EDT
theo@theo-VBox:~/Documents/spring-2014/project08/ruby$ cat Temperature.rb temp.rbb 
# Temperature.rb defines the Temperature class 
# and its operations. 
#
# Begun by: Charles Blum, for CS 214 at Calvin College.
# Completed by: Charles Blum
# Date: 15 April 2014
####################################################
module Temps
class Temperature

  def initialize(value, unit)
    @value, @unit = value, unit
  end

  #####################################
  # getters and setters for Temperature
  #####################################
  attr_reader :value, :unit

  ################################
  # converts any temp scale to F
  ################################
  def toF
    if @unit == 'C' then
      @unit = 'F'
      @value = 1.8 * @value + 32.0
    elsif @unit == 'R' then
      @unit = 'F'
      @value -= 459.67
    elsif @unit == 'K' then
      @unit = 'F'
      @value = 1.8 * @value - 459.67
    end
    self
  end

  ################################
  # converts any temp scale to C
  ################################
  def toC
    if @unit == 'F' then
      @unit = 'C'
      @value = 5.0 / 9.0 * (@value - 32.0)
    elsif @unit == 'R' then
      @unit = 'C'
      @value = 5.0 / 9.0 * @value - 273.15
    elsif @unit == 'K' then
      @unit = 'C'
      @value -= 273.15
    end
    self
  end

  ################################
  # converts any temp scale to R
  ################################
  def toR
    if @unit == 'F' then
      @unit = 'R'
      @value += 459.67
    elsif @unit == 'C' then
      @unit = 'R'
      @value = 1.8 * @value + 491.67
    elsif @unit == 'K' then
      @unit = 'R'
      @value *= 1.8
    end
    self
  end

  ################################
  # converts any temp scale to K
  ################################
  def toK
    if @unit == 'F' then
      @unit = 'K'
      @value = 5.0 / 9.0 * (@value + 459.67)
    elsif @unit == 'C' then
      @unit = 'K'
      @value += 273.15
    elsif @unit == 'R' then
      @unit = 'K'
      @value *= 5.0 / 9.0
    end
    self
 end

  ###################################
  # changes the Temp by step degrees
  ###################################
  def raiseTemp( step ) 
    if step < 0.0 then lowerTemp( -1.0 * step )
    else
        @value += step
    end 
    self
  end

  ###################################
  # changes the Temp down by step
  # degrees.  It also checks for out
  # of bounds temps.
  ###################################
  def lowerTemp( step )
    if step < 0.0 then raiseTemp( -1.0 * step )
    else
      val = @value - step
      if isValid( val, @unit ) then
        @value = val
      end 
    end 
    self
  end

  ###################################
  # equals checks two temps for 
  # equality
  ###################################
  def equals( t2 )
    t1 = self.clone
    t1.toK
    t2.toK
    if t1.value == t2.value then return true
    else return false
    end
  end

  ################################
  # checks if the first Temp is 
  # less than the second
  ################################
  def lessThan( t2 )
    t1 = self.clone
    t1.toK
    t2.toK
    if t1.value < t2.value then return true
    else return false
    end
  end

  ################################
  # Checks the validity of the  
  # combination of value and unit
  ################################
  def isValid( val, unit )
    if  unit != 'F' && unit != 'C' && unit != 'R' && unit != 'K' then
      return false
    elsif val < 0.0 && (unit == 'K' || unit == 'R') then
      return false
    elsif val < -273.15 && unit == 'C' then
      return false
    elsif val < -459.67 && unit == 'F' then
      return false
    else
      return true
    end
  end

  ################################
  # reads a temperature from the 
  # command line.  checks for 
  # validity of the temp as well
  ################################
  def readIn
    puts("The format is xxx.xx A where xxx.xx is a real value\n")
    puts("and A is a character representing a unit system (F, R, C, K)\n")

    val = -460.00
    unit = 'F'
    until isValid( val, unit)
      print("Enter here: ")
      # The input string can have a space => slice it out
      # It also has a '\n' at the end (important for indexing)
      inputStr = gets  
      inputStr.slice!(" ")
      val = inputStr[0..-3].to_f
      unit = inputStr[-2, 1].upcase
      if not isValid( val, unit ) then 
        puts("Value and unit do not constitute a valid")
        puts("Temperature. Please try again.")
      end 
    end

    @value = val
    @unit = unit
    self 
  end

  ################################
  # writeOut writes a temp to the
  # terminal 
  ################################
  def writeOut
    temp = self.clone
    puts( temp.toF().toString() + "\t" +
          temp.toC().toString() + "\t" +
	  temp.toR().toString() + "\t" +
  	  temp.toK().toString() + "\n" )
    self
  end

  ################################
  # converts a temp to string   
  # clean output
  ################################
  def toString
    sprintf('%6.2f', @value) + " " + @unit
  end

end
end
# temp.rb tests the Temperature class and its 
# operations.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Charles Blum
# Date: 15 April 2014
####################################################

require 'test/unit/assertions'
include Test::Unit::Assertions
require './Temperature'


def testTemp
  # seed values for the base and limit Temps
  baseTemp = Temps::Temperature.new( 0.0, 'F' )
  limitTemp = Temps::Temperature.new( 100.0, 'F' )
  print("Enter a base Temperature: ")
  baseTemp.readIn
  print("Enter a limit Temperature: ")
  limitTemp.readIn
  puts("Now enter a step value: ")
  step = gets.to_f

  while baseTemp.lessThan( limitTemp )
    baseTemp.writeOut
    baseTemp.raiseTemp( step )
  end
end

testTemp

theo@theo-VBox:~/Documents/spring-2014/project08/ruby$ ruby temp.rb 
Enter a base Temperature: The format is xxx.xx A where xxx.xx is a real value
and A is a character representing a unit system (F, R, C, K)
Enter here: 0 f
Enter a limit Temperature: The format is xxx.xx A where xxx.xx is a real value
and A is a character representing a unit system (F, R, C, K)
Enter here: 100C
Now enter a step value: 
1
  0.00 F	-17.78 C	459.67 R	255.37 K
  1.00 F	-17.22 C	460.67 R	255.93 K
  2.00 F	-16.67 C	461.67 R	256.48 K
  3.00 F	-16.11 C	462.67 R	257.04 K
  4.00 F	-15.56 C	463.67 R	257.59 K
  5.00 F	-15.00 C	464.67 R	258.15 K
  6.00 F	-14.44 C	465.67 R	258.71 K
  7.00 F	-13.89 C	466.67 R	259.26 K
  8.00 F	-13.33 C	467.67 R	259.82 K
  9.00 F	-12.78 C	468.67 R	260.37 K
 10.00 F	-12.22 C	469.67 R	260.93 K
 11.00 F	-11.67 C	470.67 R	261.48 K
 12.00 F	-11.11 C	471.67 R	262.04 K
 13.00 F	-10.56 C	472.67 R	262.59 K
 14.00 F	-10.00 C	473.67 R	263.15 K
 15.00 F	 -9.44 C	474.67 R	263.71 K
 16.00 F	 -8.89 C	475.67 R	264.26 K
 17.00 F	 -8.33 C	476.67 R	264.82 K
 18.00 F	 -7.78 C	477.67 R	265.37 K
 19.00 F	 -7.22 C	478.67 R	265.93 K
 20.00 F	 -6.67 C	479.67 R	266.48 K
 21.00 F	 -6.11 C	480.67 R	267.04 K
 22.00 F	 -5.56 C	481.67 R	267.59 K
 23.00 F	 -5.00 C	482.67 R	268.15 K
 24.00 F	 -4.44 C	483.67 R	268.71 K
 25.00 F	 -3.89 C	484.67 R	269.26 K
 26.00 F	 -3.33 C	485.67 R	269.82 K
 27.00 F	 -2.78 C	486.67 R	270.37 K
 28.00 F	 -2.22 C	487.67 R	270.93 K
 29.00 F	 -1.67 C	488.67 R	271.48 K
 30.00 F	 -1.11 C	489.67 R	272.04 K
 31.00 F	 -0.56 C	490.67 R	272.59 K
 32.00 F	  0.00 C	491.67 R	273.15 K
 33.00 F	  0.56 C	492.67 R	273.71 K
 34.00 F	  1.11 C	493.67 R	274.26 K
 35.00 F	  1.67 C	494.67 R	274.82 K
 36.00 F	  2.22 C	495.67 R	275.37 K
 37.00 F	  2.78 C	496.67 R	275.93 K
 38.00 F	  3.33 C	497.67 R	276.48 K
 39.00 F	  3.89 C	498.67 R	277.04 K
 40.00 F	  4.44 C	499.67 R	277.59 K
 41.00 F	  5.00 C	500.67 R	278.15 K
 42.00 F	  5.56 C	501.67 R	278.71 K
 43.00 F	  6.11 C	502.67 R	279.26 K
 44.00 F	  6.67 C	503.67 R	279.82 K
 45.00 F	  7.22 C	504.67 R	280.37 K
 46.00 F	  7.78 C	505.67 R	280.93 K
 47.00 F	  8.33 C	506.67 R	281.48 K
 48.00 F	  8.89 C	507.67 R	282.04 K
 49.00 F	  9.44 C	508.67 R	282.59 K
 50.00 F	 10.00 C	509.67 R	283.15 K
 51.00 F	 10.56 C	510.67 R	283.71 K
 52.00 F	 11.11 C	511.67 R	284.26 K
 53.00 F	 11.67 C	512.67 R	284.82 K
 54.00 F	 12.22 C	513.67 R	285.37 K
 55.00 F	 12.78 C	514.67 R	285.93 K
 56.00 F	 13.33 C	515.67 R	286.48 K
 57.00 F	 13.89 C	516.67 R	287.04 K
 58.00 F	 14.44 C	517.67 R	287.59 K
 59.00 F	 15.00 C	518.67 R	288.15 K
 60.00 F	 15.56 C	519.67 R	288.71 K
 61.00 F	 16.11 C	520.67 R	289.26 K
 62.00 F	 16.67 C	521.67 R	289.82 K
 63.00 F	 17.22 C	522.67 R	290.37 K
 64.00 F	 17.78 C	523.67 R	290.93 K
 65.00 F	 18.33 C	524.67 R	291.48 K
 66.00 F	 18.89 C	525.67 R	292.04 K
 67.00 F	 19.44 C	526.67 R	292.59 K
 68.00 F	 20.00 C	527.67 R	293.15 K
 69.00 F	 20.56 C	528.67 R	293.71 K
 70.00 F	 21.11 C	529.67 R	294.26 K
 71.00 F	 21.67 C	530.67 R	294.82 K
 72.00 F	 22.22 C	531.67 R	295.37 K
 73.00 F	 22.78 C	532.67 R	295.93 K
 74.00 F	 23.33 C	533.67 R	296.48 K
 75.00 F	 23.89 C	534.67 R	297.04 K
 76.00 F	 24.44 C	535.67 R	297.59 K
 77.00 F	 25.00 C	536.67 R	298.15 K
 78.00 F	 25.56 C	537.67 R	298.71 K
 79.00 F	 26.11 C	538.67 R	299.26 K
 80.00 F	 26.67 C	539.67 R	299.82 K
 81.00 F	 27.22 C	540.67 R	300.37 K
 82.00 F	 27.78 C	541.67 R	300.93 K
 83.00 F	 28.33 C	542.67 R	301.48 K
 84.00 F	 28.89 C	543.67 R	302.04 K
 85.00 F	 29.44 C	544.67 R	302.59 K
 86.00 F	 30.00 C	545.67 R	303.15 K
 87.00 F	 30.56 C	546.67 R	303.71 K
 88.00 F	 31.11 C	547.67 R	304.26 K
 89.00 F	 31.67 C	548.67 R	304.82 K
 90.00 F	 32.22 C	549.67 R	305.37 K
 91.00 F	 32.78 C	550.67 R	305.93 K
 92.00 F	 33.33 C	551.67 R	306.48 K
 93.00 F	 33.89 C	552.67 R	307.04 K
 94.00 F	 34.44 C	553.67 R	307.59 K
 95.00 F	 35.00 C	554.67 R	308.15 K
 96.00 F	 35.56 C	555.67 R	308.71 K
 97.00 F	 36.11 C	556.67 R	309.26 K
 98.00 F	 36.67 C	557.67 R	309.82 K
 99.00 F	 37.22 C	558.67 R	310.37 K
100.00 F	 37.78 C	559.67 R	310.93 K
101.00 F	 38.33 C	560.67 R	311.48 K
102.00 F	 38.89 C	561.67 R	312.04 K
103.00 F	 39.44 C	562.67 R	312.59 K
104.00 F	 40.00 C	563.67 R	313.15 K
105.00 F	 40.56 C	564.67 R	313.71 K
106.00 F	 41.11 C	565.67 R	314.26 K
107.00 F	 41.67 C	566.67 R	314.82 K
108.00 F	 42.22 C	567.67 R	315.37 K
109.00 F	 42.78 C	568.67 R	315.93 K
110.00 F	 43.33 C	569.67 R	316.48 K
111.00 F	 43.89 C	570.67 R	317.04 K
112.00 F	 44.44 C	571.67 R	317.59 K
113.00 F	 45.00 C	572.67 R	318.15 K
114.00 F	 45.56 C	573.67 R	318.71 K
115.00 F	 46.11 C	574.67 R	319.26 K
116.00 F	 46.67 C	575.67 R	319.82 K
117.00 F	 47.22 C	576.67 R	320.37 K
118.00 F	 47.78 C	577.67 R	320.93 K
119.00 F	 48.33 C	578.67 R	321.48 K
120.00 F	 48.89 C	579.67 R	322.04 K
121.00 F	 49.44 C	580.67 R	322.59 K
122.00 F	 50.00 C	581.67 R	323.15 K
123.00 F	 50.56 C	582.67 R	323.71 K
124.00 F	 51.11 C	583.67 R	324.26 K
125.00 F	 51.67 C	584.67 R	324.82 K
126.00 F	 52.22 C	585.67 R	325.37 K
127.00 F	 52.78 C	586.67 R	325.93 K
128.00 F	 53.33 C	587.67 R	326.48 K
129.00 F	 53.89 C	588.67 R	327.04 K
130.00 F	 54.44 C	589.67 R	327.59 K
131.00 F	 55.00 C	590.67 R	328.15 K
132.00 F	 55.56 C	591.67 R	328.71 K
133.00 F	 56.11 C	592.67 R	329.26 K
134.00 F	 56.67 C	593.67 R	329.82 K
135.00 F	 57.22 C	594.67 R	330.37 K
136.00 F	 57.78 C	595.67 R	330.93 K
137.00 F	 58.33 C	596.67 R	331.48 K
138.00 F	 58.89 C	597.67 R	332.04 K
139.00 F	 59.44 C	598.67 R	332.59 K
140.00 F	 60.00 C	599.67 R	333.15 K
141.00 F	 60.56 C	600.67 R	333.71 K
142.00 F	 61.11 C	601.67 R	334.26 K
143.00 F	 61.67 C	602.67 R	334.82 K
144.00 F	 62.22 C	603.67 R	335.37 K
145.00 F	 62.78 C	604.67 R	335.93 K
146.00 F	 63.33 C	605.67 R	336.48 K
147.00 F	 63.89 C	606.67 R	337.04 K
148.00 F	 64.44 C	607.67 R	337.59 K
149.00 F	 65.00 C	608.67 R	338.15 K
150.00 F	 65.56 C	609.67 R	338.71 K
151.00 F	 66.11 C	610.67 R	339.26 K
152.00 F	 66.67 C	611.67 R	339.82 K
153.00 F	 67.22 C	612.67 R	340.37 K
154.00 F	 67.78 C	613.67 R	340.93 K
155.00 F	 68.33 C	614.67 R	341.48 K
156.00 F	 68.89 C	615.67 R	342.04 K
157.00 F	 69.44 C	616.67 R	342.59 K
158.00 F	 70.00 C	617.67 R	343.15 K
159.00 F	 70.56 C	618.67 R	343.71 K
160.00 F	 71.11 C	619.67 R	344.26 K
161.00 F	 71.67 C	620.67 R	344.82 K
162.00 F	 72.22 C	621.67 R	345.37 K
163.00 F	 72.78 C	622.67 R	345.93 K
164.00 F	 73.33 C	623.67 R	346.48 K
165.00 F	 73.89 C	624.67 R	347.04 K
166.00 F	 74.44 C	625.67 R	347.59 K
167.00 F	 75.00 C	626.67 R	348.15 K
168.00 F	 75.56 C	627.67 R	348.71 K
169.00 F	 76.11 C	628.67 R	349.26 K
170.00 F	 76.67 C	629.67 R	349.82 K
171.00 F	 77.22 C	630.67 R	350.37 K
172.00 F	 77.78 C	631.67 R	350.93 K
173.00 F	 78.33 C	632.67 R	351.48 K
174.00 F	 78.89 C	633.67 R	352.04 K
175.00 F	 79.44 C	634.67 R	352.59 K
176.00 F	 80.00 C	635.67 R	353.15 K
177.00 F	 80.56 C	636.67 R	353.71 K
178.00 F	 81.11 C	637.67 R	354.26 K
179.00 F	 81.67 C	638.67 R	354.82 K
180.00 F	 82.22 C	639.67 R	355.37 K
181.00 F	 82.78 C	640.67 R	355.93 K
182.00 F	 83.33 C	641.67 R	356.48 K
183.00 F	 83.89 C	642.67 R	357.04 K
184.00 F	 84.44 C	643.67 R	357.59 K
185.00 F	 85.00 C	644.67 R	358.15 K
186.00 F	 85.56 C	645.67 R	358.71 K
187.00 F	 86.11 C	646.67 R	359.26 K
188.00 F	 86.67 C	647.67 R	359.82 K
189.00 F	 87.22 C	648.67 R	360.37 K
190.00 F	 87.78 C	649.67 R	360.93 K
191.00 F	 88.33 C	650.67 R	361.48 K
192.00 F	 88.89 C	651.67 R	362.04 K
193.00 F	 89.44 C	652.67 R	362.59 K
194.00 F	 90.00 C	653.67 R	363.15 K
195.00 F	 90.56 C	654.67 R	363.71 K
196.00 F	 91.11 C	655.67 R	364.26 K
197.00 F	 91.67 C	656.67 R	364.82 K
198.00 F	 92.22 C	657.67 R	365.37 K
199.00 F	 92.78 C	658.67 R	365.93 K
200.00 F	 93.33 C	659.67 R	366.48 K
201.00 F	 93.89 C	660.67 R	367.04 K
202.00 F	 94.44 C	661.67 R	367.59 K
203.00 F	 95.00 C	662.67 R	368.15 K
204.00 F	 95.56 C	663.67 R	368.71 K
205.00 F	 96.11 C	664.67 R	369.26 K
206.00 F	 96.67 C	665.67 R	369.82 K
207.00 F	 97.22 C	666.67 R	370.37 K
208.00 F	 97.78 C	667.67 R	370.93 K
209.00 F	 98.33 C	668.67 R	371.48 K
210.00 F	 98.89 C	669.67 R	372.04 K
211.00 F	 99.44 C	670.67 R	372.59 K
theo@theo-VBox:~/Documents/spring-2014/project08/ruby$ exit

Script done on Tue 15 Apr 2014 05:52:02 PM EDT
