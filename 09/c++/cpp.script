Script started on Mon 21 Apr 2014 12:56:11 PM EDT
theo@theo-VBox:~/Documents/spring-2014/09/c++$ cat mylist.h mylist.cpp max.cpp 
/* mylist.h declares functions that extend the STL list.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by:Charles Blum
 * Date:21 April 2014
 */

#include <list>           // list<>
using namespace std;

void print(const list<int> & aList, ostream & out);
/* mylist.cpp defines functions that extend the STL list.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by:
 * Date:
 */

#include <iostream>     // cout, <<
using namespace std;

#include "mylist.h"

/*********************************************
 * print() displays an STL list of integers. *
 * Receive: aList, a list of integers,       *
 *          out, an ostream.                 *
 * Output: the values in aList, to out.      *
 *********************************************/
void print(const list<int> & aList, ostream & out) {
  list<int>::const_iterator it = aList.begin();
  while ( it != aList.end() )
  {
    out << *it << '\t';
    it++;
  }
}
/* max.cpp finds the maximum value in a C++ linked list.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by:Charles Blum
 * Date:21 April 2014
 */

#include <iostream>       // cin, cout, <<, >>
#include <algorithm> 	  // max_element
using namespace std;

#include "mylist.h"       // print()

int main() {
  // define list1, list2, list3 ...
  list<int> list1, list2, list3;  

  list1.push_back(99);    // 99, 88, 77, 66, 55
  list1.push_back(88);    // max is first
  list1.push_back(77);
  list1.push_back(66);  
  list1.push_back(55);

  list2.push_back(55);    // 55, 66, 77, 88, 99
  list2.push_back(66);    // max is last
  list2.push_back(77);  
  list2.push_back(88);  
  list2.push_back(99);  
  
  list3.push_back(55);    // 55, 77, 99, 88, 66
  list3.push_back(77);    // max is in the middle
  list3.push_back(99);  
  list3.push_back(88);  
  list3.push_back(66);  
  
  print(list1, cout); cout << endl;
  print(list2, cout); cout << endl;
  print(list3, cout); cout << endl;

  // display maxima of the 3 lists...
  cout << *max_element(list1.begin(), list1.end()) << endl;
  cout << *max_element(list2.begin(), list2.end()) << endl;
  cout << *max_element(list3.begin(), list3.end()) << endl;
}

theo@theo-VBox:~/Documents/spring-2014/09/c++$ make
make: `cppMax' is up to date.
theo@theo-VBox:~/Documents/spring-2014/09/c++$ ./cppMax 
99	88	77	66	55	
55	66	77	88	99	
55	77	99	88	66	
99
99
99
theo@theo-VBox:~/Documents/spring-2014/09/c++$ exit

Script done on Mon 21 Apr 2014 12:56:35 PM EDT
