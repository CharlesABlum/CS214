Script started on Tue 01 Apr 2014 09:36:31 PM EDT
]0;theo@theo-VBox: ~/Desktop/cs332/JCShelltheo@theo-VBox:~/Desktop/cs332/JCShell$ cat CommandLine.h CommandLine.cpp CommanddLineTester.h CommandLineTester.cpp JCShell.h Jc[Kc[KCShell.cpp Path.h Path.cpp Prompt..h Prompt.cpp shell.cpp 
/*
 * CommandLine.h
 *
 *  Created on: Mar 12, 2014
 *      Author: jgl5
 */

#ifndef COMMANDLINE_H_
#define COMMANDLINE_H_

#include <string>
#include <vector>
using namespace std;

class CommandLine {
public:
	CommandLine();
	CommandLine(istream& in);
	~CommandLine();
	char* getCommand() const;
	int getArgCount() const;
	char** getArgVector() const;
	char* getArgVector(int i) const;
	bool noAmpersand() const;
private:
	vector<char*> argVector; // vector which actually contains all the argv data
	char** argv; // pointer to array of character arrays - points to first item of argVector
	int argc; // number of elements in array pointed to by argv
};

#endif /* COMMANDLINE_H_ */
/*
 * CommandLine.cpp
 *
 *  Created on: Mar 12, 2014
 *      Author: jgl5
 */

#include "CommandLine.h"
#include <string.h>
#include <iostream>
using namespace std;

CommandLine::CommandLine() {
	argc = 0;
	argVector = vector<char*>();
	argv = NULL;
}

CommandLine::CommandLine(istream& in) {
	// thanks to Micah for giving me the cool idea of using a vector
	// which is guaranteed to use contiguous memory
	argc = 0;
	argVector = vector<char*>();
	bool readingWord = false;
	string word = "";
	char ch;
	while (true) {
		ch = in.get();
		if (ch == ' ' || ch == '\t' || ch == '\n') {
			if (readingWord) {
				argVector.push_back(new char [word.length() + 1]);
				strcpy(argVector[argc], word.c_str());
				readingWord = false;
				argc++;
			}
			if (ch == '\n') {
				break;
			}
		} else {
			if (!readingWord) {
				readingWord = true;
				word = "";
			}
			word.push_back(ch);
		}
	}
	argVector.push_back(NULL);
	argv = &(argVector[0]);
}

CommandLine::~CommandLine() {
	if (argc > 0) {
		for (int i = 0; i < argc; i++) {
			delete [] argv[i];
		}
	}
	// don't delete argv, as it is part of argVector
	// it will get cleaned up when argVector is destroyed
}

char* CommandLine::getCommand() const {
	if (argc > 0) {
		return argv[0];
	}
	return "";
}

int CommandLine::getArgCount() const {
	return argc;
}

char** CommandLine::getArgVector() const {
	return argv;
}

char* CommandLine::getArgVector(int i) const {
	return argv[i];
}

bool CommandLine::noAmpersand() const {
	if (argc == 0) {
		return false;
	}
	return (! strcmp("&", argv[argc - 1]) == 0);
}
/*
 * CommandLineTester.h
 *
 *  Created on: Mar 12, 2014
 *      Author: jgl5
 */

#ifndef COMMANDLINETESTER_H_
#define COMMANDLINETESTER_H_

class CommandLineTester {
public:
	CommandLineTester();
	void run();

};

#endif /* COMMANDLINETESTER_H_ */
/*
 * CommandLineTester.cpp
 *
 *  Created on: Mar 12, 2014
 *      Author: jgl5
 */

#include <iostream>
#include <sstream>
#include <assert.h>
#include <string.h>
#include "CommandLineTester.h"
#include "CommandLine.h"
#include "Prompt.h"
#include "Path.h"
#include "JCShell.h"

using namespace std;

CommandLineTester::CommandLineTester() {


}

void CommandLineTester::run() {
	cout << "running tests..." << endl;

//	CommandLine* cl = new CommandLine(cin);
//	//cl = CommandLine(cin);
//	char* word = cl.getCommand();
//	cout << word << endl;
//	assert(strcmp(cl.getCommand(), "ls") == 0);

	stringstream stream;
	stream << "ls -l -r\n";
	CommandLine cmd(stream);
	assert(cmd.getArgCount() == 3);
	assert(strcmp(cmd.getCommand(), "ls") == 0);
	assert(string(cmd.getCommand()) == "ls");
	assert(strcmp(cmd.getArgVector(0), "ls") == 0);
	assert(strcmp(cmd.getArgVector(1), "-l") == 0);
	assert(strcmp(cmd.getArgVector(2), "-r") == 0);
	assert(cmd.noAmpersand() == true);

	CommandLine cmd2;
	assert(cmd2.getArgCount() == 0);
	assert(strcmp(cmd2.getCommand(), "") == 0);

	stream << " vim & \n " << endl;
	CommandLine cmd3(stream);
	assert(cmd3.noAmpersand() == false);
	cout << "CommandLine passed tests" << endl;

	cout << "testing Prompt" << endl;
	Prompt prompt = Prompt();
	cout << "constructor done" << endl;
	assert(prompt.get() != "");
	cout << "cwd: " << prompt.get() << endl;
	cout << "prompt passed tests" << endl;

	cout << "testing Path" << endl;
	Path path = Path();
	cout << "constructor done" << endl;
	assert(path.find("ls") != -1);
	int binIndex = path.find("ls");
	assert(path.find("thisisnotaprogram") == -1);
	cout << binIndex << endl;
	assert(path.getDirectory(binIndex) == "/bin");
	assert(path.getDirectory(-1) == "");
	assert(path.getDirectory(9000) == "");
	cout << "path passed tests" << endl;

	cout << "running shell" << endl;
	JCShell shell = JCShell();
	shell.run();

}
/*
 * JCShell.h
 *
 *  Created on: Mar 17, 2014
 *      Authors: jgl5 and cab35
 */

#ifndef JCSHELL_H_
#define JCSHELL_H_

#include "Path.h"
#include "Prompt.h"
#include "CommandLine.h"

class JCShell {
public:
	JCShell();
	void run();
	~JCShell();
private:
	void waitIfBackgrounded(int childPid) const;
	void runCd();
	void runCommand(const string& command) const;
	void chooseCommand(const string& command) const;
	Path myPath;
	Prompt myPrompt;
	CommandLine* myCommandLine;
};

#endif /* JCSHELL_H_ */
/*
 * JCShell.cpp - JC Shell program.  parses the commmand
 * line and exectues the appropiate program.  It handles
 * basic comands like "cd" and "pwd"
 *
 * Charles Blum and James Lamine
 * cs232
 * Calvin College
 * 03-31-2014
 */

#include <iostream>
#include <sys/types.h>
#include <sys/wait.h>
#include "JCShell.h"
using namespace std;

/*
 * defualt constructor
 */
JCShell::JCShell() {
	myPrompt = Prompt();
	myCommandLine = NULL;
	myPath = Path();
}

/*
 * defualt de-constructor
 */

JCShell::~JCShell() {
	delete myCommandLine;
}

/*
 * waitIfBackground checks to see if the program should
 * be run in the background and takes the appropriate
 * action by deciding to fork the process or not.
 * parameters: childPid, as integer; the childs process ID
 */
void JCShell::waitIfBackgrounded(int childPid) const {
	if (myCommandLine->noAmpersand() ||
		(!myCommandLine->noAmpersand() && string(myCommandLine->getCommand()) == "&")) {
		// wait for the child to finish
		waitpid(childPid, NULL, 0);
	} else {
		cout << "backgrounded process - pid " << childPid << endl;
	}
}

/* 
 * chooseCommand makes sure the command is not an empty 
 * string or "pwd".  If not, then it passes the command
 * runCommand.
 * Parameters: command, as string.
 */
void JCShell::chooseCommand(const string& command) const {
	if (command == "pwd") {
		cout << myPrompt.get() << endl;
	} else if (command != "") {
		runCommand(command);
	}
}

/*
 * runCommand runs the commend from the terminal.
 * Paremeters: command, as string.
 */
void JCShell::runCommand(const string& command) const {
	int dirIndex = myPath.find(command);
	if (dirIndex == -1) {
		cout << command << ": command not found" << endl;
	} else {
		char* environment[] = { NULL };
		string commandPath = myPath.getDirectory(dirIndex) + "/" + command;
		if (!myCommandLine->noAmpersand()) {
			myCommandLine->getArgVector()[myCommandLine->getArgCount() -1 ] = NULL;
		}
		if (execve(commandPath.c_str(), myCommandLine->getArgVector(), environment) == -1) {
			cout << command << ": execution failed" << endl;
		}
	}
}

/*
 * runCd runs the Cd command.
 */
void JCShell::runCd() {
	if ((myCommandLine->noAmpersand() && myCommandLine->getArgCount() != 2) ||
		(!myCommandLine->noAmpersand() && myCommandLine->getArgCount() != 3 )) {
		// check number of arguments
		cout << "cd: takes exactly one argument" << endl;
	} else {
		char* dirName = myCommandLine->getArgVector(1);
		// change directories, check for errors
		if (chdir(dirName) == -1) {
			cout << "cd: " << *dirName << ": No such file or directory" << endl;
		}
	}
}

/*
 * run is the main part of the JCShell class.
 * This method interacts with the user via a 
 * terminal.
 */
void JCShell::run() {
	while (true) {
		string command;
		myPrompt = Prompt();
		// print prompt
		cout << myPrompt.get() << "$ " << flush;
		myCommandLine = new CommandLine(cin);
		command = string(myCommandLine->getCommand());
		if (command == "") {
			// ignore empty input
		} else if (command == "cd") {
			// cd should not be run in another process
			runCd();
		} else if (command == "exit") {
			break;
		}
		else {
			// fork to run command in a different process
			pid_t pid = fork();
			if (pid != 0) {
				// we are in the parent process
				waitIfBackgrounded(pid);
			} else {
				// we are in the child process
				chooseCommand(command);
				exit(0);
			}
		}
		delete myCommandLine;
	}
}
/* Path.h, represents the directories which the
 * CommandShell will search for executables programs
 *
 *  Created on: Mar 16, 2014
 *  Created for: cs232, Command Shell Project
 *  Author: Charles Blum
 *  Working with: James Lamine
 */

#ifndef PATH_H_
#define PATH_H_
#include <string>
#include <sstream>
#include <vector>
#include <cstdlib>
#include <sys/types.h>	//opendir() readdir(), closedir()
#include <dirent.h>		//opendir() readdir(), closedir()

using namespace std;

class Path {
public:
	Path();
	int find(const string& program) const;
	string getDirectory(const int i) const;
private:
	vector<string> myDirectories;
};
#endif /* PATH_H_ */
/* Path.cpp
 *
 *  Created on: Mar 16, 2014
 *  Created for: cs232, Command Shell Project
 *  Author: Charles Blum
 *  Working with: James Lamine
 */

#include "Path.h"
using namespace std;

/* Default constructor, uses the getenv() system call
 * to store each directory from / to the working dir.
 * getenv() returns a string of chars which represent a
 * list of associated directories with the working directory,
 * which are delimited by ':'
 * postcondition:	myDirectories contains all file paths
 *			in PATH
 */
Path::Path() {
	//temp variables
	char* listOfDirs = NULL;
	stringstream ss;
	string dir;
	//get the list of directories
	listOfDirs = getenv( "PATH" );
	myDirectories = vector<string>();

	if ( listOfDirs != NULL )
	{
		ss << listOfDirs;
		while ( getline(ss, dir, ':' ) )
		{
			myDirectories.push_back( dir );
		}
	}
}

/* find(const string  & program) attempts to find the
 * index of program within myDirectories, and if it
 * doesn't, returns -1
 * precondition:	myDirectories contains various names
 * 			program is a string
 * postcondition:	return the index of program, or -1, as int
 */
int Path::find(const string & program) const {
	DIR *dir;

	for ( unsigned i = 0; i < myDirectories.size(); i ++ )
	{
		dir = opendir( myDirectories[i].c_str() );
		if ( dir != NULL )	//if the directory was opened...
		{
			struct dirent *entry;
			while ((entry = readdir(dir)) != NULL)
				//check the entry to see if it matches program
				if ( program == entry->d_name )
					return i;
			closedir(dir);
		}
	}
	//If program isn't found in the vector of directories,
	// return -1 to denote program wasn't found
	return -1;
}

/* getDirectory(const int i) takes in an integer, checks
 * it is within the size of myDirectories, and then returns
 * the corresponding string from myDirectories;
 * postcondition:	directory at index i is returned, as string
 */
string Path::getDirectory(const int i) const {
	//i must be between 0 (inclusive) and mySize (exclusive) to be valid
	if ( i >= 0 && i < myDirectories.size() )
		return myDirectories[i];
	else
		return "";
}
/* Prompt.h, represents the command line prompt
 *
 *  Created on: Mar 16, 2014
 *  Created for: cs232, Command Shell Project
 *  Author: Charles Blum
 *  Working with: James Lamine
 */

#ifndef PROMPT_H_
#define PROMPT_H_

#include <string>

using namespace std;

class Prompt {
public:
	Prompt();
	string get() const;
private:
	string myPath;
};

#endif /* PROMPT_H_ */
/* Prompt.cpp
 *
 *  Created on: Mar 16, 2014
 *  Created for: cs232, Command Shell Project
 *  Author: Charles Blum
 *  Working with: James Lamine
 */

#include "Prompt.h"
#include <cstdlib>
using namespace std;

/* Default constructor for Prompt.
 * precondition:  myPath empty, not initialized.
 * postcondition: myPath contains the working directory, as string
 */
Prompt::Prompt() {
	char* cwd = NULL;
	cwd = get_current_dir_name();
	if (cwd == NULL) {
		myPath = "";
		return;
	}
	myPath = string(cwd);
	free(cwd);
}

/* get() returns the current working directory, myPath
 * returned: myPath
 */
string Prompt::get() const {
	return myPath;
}
/*
 * shell.cpp - JC Shell program. Run to open a basic command line shell.
 * Includes the basic commands ``cd`` and ``pwd``.
 *
 * James Lamine and Charles Blum
 * CS 232
 * Project 3
 * Calvin College
 * 03/20/2014
 *
 */

//#include "CommandLineTester.h"
#include "JCShell.h"

int main() {
	//CommandLineTester clTester;
	//clTester.run();
	JCShell shell = JCShell();
	shell.run();
}
]0;theo@theo-VBox: ~/Desktop/cs332/JCShelltheo@theo-VBox:~/Desktop/cs332/JCShell$ cd Debug
]0;theo@theo-VBox: ~/Desktop/cs332/JCShell/Debugtheo@theo-VBox:~/Desktop/cs332/JCShell/Debug$ make all
Building target: proj3
Invoking: GCC C++ Linker
g++  -o "proj3"  ./CommandLine.o ./CommandLineTester.o ./JCShell.o ./Path.o ./Prompt.o ./shell.o   
Finished building target: proj3
 
]0;theo@theo-VBox: ~/Desktop/cs332/JCShell/Debugtheo@theo-VBox:~/Desktop/cs332/JCShell/Debug$ ./proj3 
/home/theo/Desktop/cs332/JCShell/Debug$ pwd
/home/theo/Desktop/cs332/JCShell/Debug
/home/theo/Desktop/cs332/JCShell/Debug$ pwd -a
/home/theo/Desktop/cs332/JCShell/Debug
/home/theo/Desktop/cs332/JCShell/Debug$ cs
cs: command not found
/home/theo/Desktop/cs332/JCShell/Debug$ ls
CommandLine.d	     JCShell.d	Prompt.d    proj3	subdir.mk
CommandLine.o	     JCShell.o	Prompt.o    shell.d
CommandLineTester.d  Path.d	makefile    shell.o
CommandLineTester.o  Path.o	objects.mk  sources.mk
/home/theo/Desktop/cs332/JCShell/Debug$ ls -l
total 1808
-rw-r--r-- 1 theo theo     70 Mar 17 22:27 CommandLine.d
-rw-r--r-- 1 theo theo 226032 Mar 17 22:27 CommandLine.o
-rw-r--r-- 1 theo theo    209 Mar 17 23:33 CommandLineTester.d
-rw-r--r-- 1 theo theo 169544 Mar 17 23:33 CommandLineTester.o
-rw-r--r-- 1 theo theo    141 Apr  1 21:31 JCShell.d
-rw-rw-r-- 1 theo theo 256768 Apr  1 21:31 JCShell.o
-rw-r--r-- 1 theo theo     42 Apr  1 21:31 Path.d
-rw-rw-r-- 1 theo theo 247512 Apr  1 21:31 Path.o
-rw-r--r-- 1 theo theo     50 Apr  1 21:31 Prompt.d
-rw-rw-r-- 1 theo theo  98544 Apr  1 21:31 Prompt.o
-rw-r--r-- 1 theo theo   1301 Mar 20 20:08 makefile
-rw-r--r-- 1 theo theo    231 Mar 12 19:21 objects.mk
-rwxrwxr-x 1 theo theo 665748 Apr  1 21:37 proj3
-rw-r--r-- 1 theo theo    134 Apr  1 21:31 shell.d
-rw-rw-r-- 1 theo theo 129720 Apr  1 21:31 shell.o
-rw-r--r-- 1 theo theo    526 Mar 20 20:08 sources.mk
-rw-r--r-- 1 theo theo    912 Mar 20 20:08 subdir.mk
/home/theo/Desktop/cs332/JCShell/Debug$ ls -a
.	       CommandLineTester.d  Path.d    makefile	  shell.o
..	       CommandLineTester.o  Path.o    objects.mk  sources.mk
CommandLine.d  JCShell.d	    Prompt.d  proj3	  subdir.mk
CommandLine.o  JCShell.o	    Prompt.o  shell.d
/home/theo/Desktop/cs332/JCShell/Debug$ ps -ax
Warning: bad ps syntax, perhaps a bogus '-'? See http://procps.sf.net/faq.html
  PID TTY      STAT   TIME COMMAND
    1 ?        Ss     0:01 /sbin/init
    2 ?        S      0:00 [kthreadd]
    3 ?        S      0:03 [ksoftirqd/0]
    5 ?        S<     0:00 [kworker/0:0H]
    7 ?        S      0:00 [migration/0]
    8 ?        S      0:00 [rcu_bh]
    9 ?        S      0:00 [rcuob/0]
   10 ?        S      0:08 [rcu_sched]
   11 ?        S      0:27 [rcuos/0]
   12 ?        S      0:03 [watchdog/0]
   13 ?        S<     0:00 [khelper]
   14 ?        S      0:00 [kdevtmpfs]
   15 ?        S<     0:00 [netns]
   16 ?        S<     0:00 [writeback]
   17 ?        S<     0:00 [kintegrityd]
   18 ?        S<     0:00 [bioset]
   20 ?        S<     0:00 [kblockd]
   21 ?        S<     0:00 [ata_sff]
   22 ?        S      0:00 [khubd]
   23 ?        S<     0:00 [md]
   24 ?        S<     0:00 [devfreq_wq]
   26 ?        S      0:00 [khungtaskd]
   27 ?        S      0:00 [kswapd0]
   28 ?        SN     0:00 [ksmd]
   29 ?        SN     0:00 [khugepaged]
   30 ?        S      0:00 [fsnotify_mark]
   31 ?        S      0:00 [ecryptfs-kthrea]
   32 ?        S<     0:00 [crypto]
   44 ?        S<     0:00 [kthrotld]
   46 ?        S      0:00 [scsi_eh_0]
   47 ?        S      0:00 [scsi_eh_1]
   49 ?        S<     0:00 [dm_bufio_cache]
   69 ?        S<     0:00 [deferwq]
   70 ?        S<     0:00 [charger_manager]
  196 ?        S      0:00 [scsi_eh_2]
  221 ?        S      0:03 [jbd2/sda1-8]
  222 ?        S<     0:00 [ext4-rsv-conver]
  223 ?        S<     0:00 [ext4-unrsv-conv]
  313 ?        S      0:00 upstart-udev-bridge --daemon
  320 ?        Ss     0:00 /sbin/udevd --daemon
  588 ?        S      0:00 /sbin/udevd --daemon
  589 ?        S      0:00 /sbin/udevd --daemon
  597 ?        S<     0:00 [iprt]
  658 ?        S<     0:00 [kpsmoused]
  660 ?        S      0:00 [kworker/0:2]
  685 ?        S<     0:01 [kworker/u3:1]
  696 ?        Sl     0:07 rsyslogd -c5
  723 ?        S      0:00 upstart-socket-bridge --daemon
  740 ?        Ss     0:26 dbus-daemon --system --fork --activation=upstart
  767 ?        Ss     0:00 /usr/sbin/modem-manager
  780 ?        Ss     0:00 /usr/sbin/bluetoothd
  798 ?        S      0:00 avahi-daemon: running [theo-VBox.local]
  799 ?        S      0:00 avahi-daemon: chroot helper
  801 ?        Ss     0:00 /usr/sbin/cupsd -F
  809 ?        S<     0:00 [krfcommd]
  861 ?        Ssl    0:00 NetworkManager
  886 ?        Sl     0:00 /usr/lib/policykit-1/polkitd --no-debug
  917 ?        S      0:00 /usr/sbin/dnsmasq --no-resolv --keep-in-foreground --
  925 tty4     Ss+    0:00 /sbin/getty -8 38400 tty4
  946 tty5     Ss+    0:00 /sbin/getty -8 38400 tty5
  978 tty2     Ss+    0:00 /sbin/getty -8 38400 tty2
  979 tty3     Ss+    0:00 /sbin/getty -8 38400 tty3
  981 tty6     Ss+    0:00 /sbin/getty -8 38400 tty6
  989 ?        Ss     0:00 acpid -c /etc/acpi/events -s /var/run/acpid.socket
 1019 ?        Ss     0:00 cron
 1020 ?        Ss     0:00 atd
 1029 ?        Ssl    0:00 lightdm
 1070 tty7     Ss+    4:39 /usr/bin/X :0 -auth /var/run/lightdm/root/:0 -noliste
 1074 ?        Ssl    0:00 whoopsie
 1110 ?        Sl     1:00 /usr/sbin/VBoxService
 1127 ?        Sl     0:11 /usr/sbin/console-kit-daemon --no-daemon
 1334 tty1     Ss+    0:00 /sbin/getty -8 38400 tty1
 1339 ?        Sl     0:00 lightdm --session-child 12 15
 1342 ?        Sl     0:04 /usr/lib/accountsservice/accounts-daemon
 1373 ?        Ssl    0:00 gnome-session --session=ubuntu
 1425 ?        Sl     0:00 /usr/bin/VBoxClient --clipboard
 1433 ?        Sl     0:00 /usr/bin/VBoxClient --display
 1437 ?        Sl     0:00 /usr/bin/VBoxClient --seamless
 1441 ?        Sl     8:39 /usr/bin/VBoxClient --draganddrop
 1445 ?        Ss     0:01 /usr/bin/ssh-agent /usr/bin/dbus-launch --exit-with-s
 1448 ?        S      0:00 /usr/bin/dbus-launch --exit-with-session gnome-sessio
 1455 ?        Ss     0:11 //bin/dbus-daemon --fork --print-pid 5 --print-addres
 1465 ?        Sl     0:10 /usr/lib/gnome-settings-daemon/gnome-settings-daemon
 1466 ?        SLl    0:00 /usr/bin/gnome-keyring-daemon --start --components=pk
 1478 ?        Sl     0:02 /usr/lib/upower/upowerd
 1571 ?        S      0:00 /usr/lib/gvfs/gvfsd
 1573 ?        Sl     0:00 /usr/lib/gvfs//gvfs-fuse-daemon -f /home/theo/.gvfs
 1579 ?        Rl     0:58 metacity
 1581 ?        Sl     0:00 /usr/lib/x86_64-linux-gnu/colord/colord
 1594 ?        Sl     0:53 /usr/bin/pulseaudio --start --log-target=syslog
 1596 ?        SNl    0:02 /usr/lib/rtkit/rtkit-daemon
 1600 ?        S      0:00 /usr/lib/x86_64-linux-gnu/gconf/gconfd-2
 1603 ?        S      0:00 /usr/lib/pulseaudio/pulse/gconf-helper
 1604 ?        Sl     0:11 unity-2d-panel
 1605 ?        Sl     5:50 unity-2d-shell
 1610 ?        Sl     0:12 nautilus -n
 1611 ?        Sl     0:00 /usr/lib/policykit-1-gnome/polkit-gnome-authenticatio
 1613 ?        Sl     0:00 nm-applet
 1617 ?        Sl     0:00 bluetooth-applet
 1625 ?        Sl     0:08 /usr/lib/bamf/bamfdaemon
 1626 ?        Sl     0:00 /usr/lib/gnome-settings-daemon/gnome-fallback-mount-h
 1659 ?        S      0:00 /usr/lib/gvfs/gvfs-gdu-volume-monitor
 1677 ?        Sl     0:00 /usr/lib/udisks/udisks-daemon
 1679 ?        S      0:00 udisks-daemon: not polling any devices
 1687 ?        Sl     0:00 /usr/lib/gvfs/gvfs-afc-volume-monitor
 1690 ?        S      0:00 /usr/lib/gvfs/gvfs-gphoto2-volume-monitor
 1703 ?        Sl     0:00 /usr/lib/dconf/dconf-service
 1709 ?        S      0:00 /usr/lib/gvfs/gvfsd-trash --spawner :1.9 /org/gtk/gvf
 1714 ?        Sl     0:17 /usr/lib/unity/unity-panel-service
 1721 ?        S      0:00 /usr/lib/gvfs/gvfsd-burn --spawner :1.9 /org/gtk/gvfs
 1724 ?        Sl     0:00 /usr/lib/indicator-application/indicator-application-
 1726 ?        Sl     0:00 /usr/lib/indicator-sound/indicator-sound-service
 1729 ?        Sl     0:00 /usr/lib/indicator-messages/indicator-messages-servic
 1730 ?        Sl     0:00 /usr/lib/indicator-datetime/indicator-datetime-servic
 1732 ?        Sl     0:00 /usr/lib/indicator-session/indicator-session-service
 1736 ?        Sl     0:00 /usr/lib/indicator-printers/indicator-printers-servic
 1769 ?        S      0:00 /usr/lib/geoclue/geoclue-master
 1776 ?        Sl     0:00 /usr/lib/ubuntu-geoip/ubuntu-geoip-provider
 1788 ?        Sl     0:00 /usr/lib/gnome-disk-utility/gdu-notification-daemon
 1790 ?        S      0:00 /usr/lib/gvfs/gvfsd-metadata
 1811 ?        Sl     0:04 /usr/lib/indicator-appmenu/hud-service
 1823 ?        Sl     0:03 /usr/lib/unity-lens-applications/unity-applications-d
 1825 ?        Sl     0:00 /usr/lib/unity-lens-files/unity-files-daemon
 1827 ?        Sl     0:00 /usr/lib/unity-lens-music/unity-music-daemon
 1829 ?        Sl     0:00 /usr/bin/python /usr/lib/unity-lens-video/unity-lens-
 1851 ?        Sl     0:00 /usr/bin/zeitgeist-daemon
 1862 ?        Sl     0:00 /usr/lib/zeitgeist/zeitgeist-fts
 1863 ?        Sl     0:05 zeitgeist-datahub
 1869 ?        S      0:00 /bin/cat
 1871 ?        Sl     0:00 telepathy-indicator
 1873 ?        Sl     0:00 /usr/lib/unity-lens-music/unity-musicstore-daemon
 1893 ?        Sl     0:00 /usr/lib/telepathy/mission-control-5
 1897 ?        Sl     0:00 /usr/lib/gnome-online-accounts/goa-daemon
 1983 ?        Sl     0:02 /usr/bin/python /usr/lib/unity-scope-video-remote/uni
 2001 ?        Sl     0:02 gnome-screensaver
 2135 ?        Sl     0:06 update-notifier
 2449 ?        Sl     0:00 /usr/lib/deja-dup/deja-dup/deja-dup-monitor
 3103 ?        Sl     0:00 /usr/lib/notify-osd/notify-osd
 3397 ?        S      0:00 /usr/bin/python /usr/lib/system-service/system-servic
 3401 ?        SNl    0:20 /usr/bin/python /usr/bin/update-manager --no-focus-on
 3693 ?        SLl    7:52 /usr/bin/google-chrome-stable
 3700 ?        S      0:00 /usr/bin/google-chrome-stable
 3701 ?        S      0:00 /opt/google/chrome/chrome-sandbox /opt/google/chrome/
 3702 ?        S      0:00 /opt/google/chrome/chrome --type=zygote
 3706 ?        S      0:00 /opt/google/chrome/nacl_helper
 3707 ?        S      0:00 /opt/google/chrome/chrome --type=zygote
 3781 ?        Sl     0:01 /opt/google/chrome/chrome --type=renderer --lang=en-U
 3810 ?        Sl     1:04 /opt/google/chrome/chrome --type=renderer --lang=en-U
 3819 ?        Sl     0:22 /opt/google/chrome/chrome --type=renderer --lang=en-U
 3867 ?        Sl     3:39 /opt/google/chrome/chrome --type=renderer --lang=en-U
 3898 ?        Sl     2:01 /opt/google/chrome/chrome --type=renderer --lang=en-U
 4249 ?        S      0:00 [kworker/u2:0]
 4363 ?        S      0:00 /usr/lib/eclipse/eclipse
 4380 ?        Sl     0:44 /usr/bin/java -Xms40m -Xmx384m -Dorg.eclipse.equinox.
 4461 ?        Sl     0:02 /opt/google/chrome/chrome --type=renderer --lang=en-U
 4483 ?        S<     0:00 [kworker/u3:0]
 4493 ?        Sl     0:14 gnome-terminal
 4502 ?        S      0:00 gnome-pty-helper
 4503 pts/0    Ss+    0:00 bash
 4614 pts/1    Ss     0:00 bash
 4751 ?        S      0:01 [kworker/0:0]
 4752 ?        S      0:00 [kworker/u2:1]
 4762 ?        S      0:00 /sbin/dhclient -d -4 -sf /usr/lib/NetworkManager/nm-d
 4921 ?        Sl     0:01 /opt/google/chrome/chrome --type=renderer --lang=en-U
 5147 pts/1    S+     0:00 script JCShell.script
 5148 pts/1    S+     0:00 script JCShell.script
 5149 pts/3    Ss     0:00 bash -i
 5286 pts/3    S+     0:00 ./proj3
 5294 pts/3    R+     0:00 ps -ax
/home/theo/Desktop/cs332/JCShell/Debug$ cd ..
/home/theo/Desktop/cs332/JCShell$ pwd
/home/theo/Desktop/cs332/JCShell
/home/theo/Desktop/cs332/JCShell$ cd ..
/home/theo/Desktop/cs332$ ls
Chat  Chat2.0  JCShell	Layer2Display.java  Server  lab01  layer2lab stuff
/home/theo/Desktop/cs332$ cd Cha	t
/home/theo/Desktop/cs332/Chat$ ls
bin  chat  src
/home/theo/Desktop/cs332/Chat$ cd bont
cd: b: No such file or directory
/home/theo/Desktop/cs332/Chat$ cs   d i bin
/home/theo/Desktop/cs332/Chat/bin$ ls
Chat_Client.class
/home/theo/Desktop/cs332/Chat/bin$ e ^C
]0;theo@theo-VBox: ~/Desktop/cs332/JCShell/Debugtheo@theo-VBox:~/Desktop/cs332/JCShell/Debug$ e[Kexit

Script done on Tue 01 Apr 2014 09:38:53 PM EDT
