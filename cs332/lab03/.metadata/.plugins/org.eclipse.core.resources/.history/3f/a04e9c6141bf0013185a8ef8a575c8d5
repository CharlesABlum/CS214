
public class Test
{
	final static int LAN1PORT = LightSystem.DEFAULT_PORT;
	final static int LAN2PORT = LightSystem.DEFAULT_PORT + 1;
	final static int LAN3PORT = LightSystem.DEFAULT_PORT + 2;
	final static int LAN4PORT = LightSystem.DEFAULT_PORT + 3;


	public static void main(String[] args)
	{
		//Norman's tests
		//testSwitch();
		//		testLayer3();

		//my tests
		testL3Address();
		testL3Packet();
		testL3Shim();
		testL3Handler();
		testL3Display();

		System.out.println("ALL TESTS PASSED!");
	}

	public static void testL3Address() {
		/*
		 * Attempt to get assertions working
		 * add the -ea switch under 
		 * run config > java app > test > args > vm args
		 */
		assert (true): "message1";
		//assert (!true): "message2";
		//assert (false): "message3";
		assert (!false): "message4";


		//Test the string constructor
		System.out.println("\nTesting L3Address...");
		String net = "11110000", host = "10101010";
		L3Address l3a1 = new L3Address ( net + host );
		L3Address l3a2 = new L3Address ( net + host );
		assert ( l3a1.getNetwork() == 240 ): "GET NETWORK ERROR!";
		assert ( l3a1.getHost() == 170 ): "GET HOST ERROR!";
		//		System.out.println(l3a1.toString());
		assert ( l3a1.toString().compareTo("1111000010101010") == 0 ): "TO STRING ERROR!";
		System.out.println(l3a1.toDottedDecimal());
		assert ( l3a1.toDottedDecimal().compareTo("240.170") == 0 ): "DOTTED DECIMAL ERROR!";
		assert ( l3a1.isBcast() == false ): "IS BCAST ERROR!";
		assert ( l3a1.equals(l3a2 ) ): "EQUALS ERROR!";
		System.out.println("bitString consturctor passed!");

		//Test the int net and host constructor
		L3Address l3a3 = new L3Address ( 242 , 156 );
		assert ( l3a3.getNetwork() == 242 ): "GET NETWORK ERROR!";
		assert ( l3a3.getHost() == 156 ): "GET HOST ERROR!";
		assert ( l3a3.toString().compareTo("1111001010011100") == 0 ): "TO STRING ERROR!";
		assert ( l3a3.toDottedDecimal().compareTo("242.156") == 0 ): "DOTTED DECIMAL ERROR!";
		assert ( l3a3.isBcast() == false ): "IS BCAST ERROR!";
		assert ( !l3a3.equals(l3a2 ) ): "EQUALS ERROR!";
		System.out.println("net and host parts consturctor passed!");

		//Test fromDottedDecimal and BCAST
		L3Address l3a4 = new L3Address ( 0xff, 0xff );
		assert ( l3a4.isBcast() == true ): "IS BCAST ERROR!";
		l3a4.fromDottedDecimal( "10.195" );
		System.out.println( "net: " + l3a4.getNetwork() );
		System.out.println( "host: " + l3a4.getHost() );
		assert ( l3a4.getNetwork() == 10 ): "FROM DOTTED DECIMAL ERROR!";
		assert ( l3a4.getHost() == 195 ): "FROM DOTTED DECIMAL ERROR!";
		System.out.println("L3Address Passed!");
	}

	public static void testL3Packet() {
		System.out.println("\nTesting L3Packet...");
		//Test the Fields constructor
		//43-bits long...
		String bitString = "1111000010101000101011110101011010110101010";
		L3Address dest1 = new L3Address ( 240, 10 );
		L3Address src1  = new L3Address ( 241, 156 );		
		L3Packet l3p1 = new L3Packet( dest1, src1, bitString );
		assert ( l3p1.getDestAddr().equals(dest1) ): "DEST ADDR ERROR!";
		assert ( !l3p1.getDestAddr().equals(src1) ): "DEST ADDR ERROR!";
		assert ( l3p1.getSrcAddr().equals(src1) ): "SRC ADDR ERROR!";
		assert ( !l3p1.getSrcAddr().equals(dest1) ): "SRC ADDR ERROR!";
		assert ( l3p1.getHopsLeft() == 15 ): "TTL ERROR!";
		assert ( l3p1.getPayload() == bitString ): "PAYLOAD ERROR!";
		assert ( l3p1.getPayload().length() == bitString.length() ): "PAYLOAD LENGTH ERROR!";
		//src 11110000 00001010 dest 11110001 10011100
		//len 00000000 00101101 ttl 1111
		//Test the bitString constructor
		//this will be useful
		String packet = "11110000 00001010 11110001 10011100 00000000 0010 1011 1111" + bitString;

		System.out.println(packet);
		System.out.println(l3p1.toString());
		
		assert ( l3p1.toString().compareTo( packet ) == 0  ): "TO STRING ERROR!";
		System.out.println("Fields consturctor passed!");


		L3Packet l3p2 = new L3Packet ( packet );
		assert ( l3p2.getDestAddr().equals(dest1) ): "DEST ADDR ERROR!";
		assert ( l3p2.getSrcAddr().equals(src1) ): "SRC ADDR ERROR!";
		assert ( l3p2.getPayload().compareTo(bitString) == 0 ): "PAYLOAD ERROR!";
		assert ( l3p2.getHopsLeft() == 15 ): "TTL ERROR!";
		System.out.println("packet consturctor passed!");
	}

	public static void testL3Shim() {

	}

	public static void testL3Handler() {

	}

	public static void testL3Display() {

	}

	public static void testLayer3()
	{
		new LightSystem();
		// 1 is the mac address
		Layer2Endpoint le1 = new Layer2Endpoint("localhost", LAN1PORT, 1);
		// 1 is the network part.  thus the address is 1.1.
		new L3Display(new L3Handler(le1, 1));			    

		// L3 endpoint with address 1.2
		Layer2Endpoint le2 = new Layer2Endpoint("localhost", LAN1PORT, 2);
		new L3Display(new L3Handler(le2, 1));

		Layer2Endpoint le3 = new Layer2Endpoint("localhost", LAN1PORT, 3);
		new L3Display(new L3Handler(le3, 1));

	}

	public static void testSwitch()
	{
		new LightSystem();
		//	new LightDisplay(new LightPanel("LAN 1"));

		new LightSystem(LAN2PORT);
		//	new LightDisplay(new LightPanel("LAN 2", "localhost", LAN2PORT));

		new LightSystem(LAN3PORT);
		//	new LightDisplay(new LightPanel("LAN 3", "localhost", LAN3PORT));

		new LightSystem(LAN4PORT);
		//	new LightDisplay(new LightPanel("LAN 4", "localhost", LAN4PORT));

		Switch sw = new Switch(8);	// 8 port switch
		new SwitchDisplay(sw);

		// A switch port connected to LightSystem sys1 (DEFAULT_PORT) on the switch's
		// port 0.
		sw.attachPort(new SwitchPort(0),
				new SwitchLightPanel("LAN 1", "localhost", LAN1PORT));

		// A host on LightSystem 1.
		new Layer2Display(new Layer2Endpoint(17));

		// Create a 2nd switch port, connected to the 2nd Light System, and attached
		// to our switch's port 1.
		sw.attachPort(new SwitchPort("localhost", LAN2PORT, 1),
				new SwitchLightPanel("LAN 2", "localhost", LAN2PORT));

		// 2 Hosts on light system 2.
		new Layer2Display(new Layer2Endpoint("localhost", LAN2PORT, 18));
		new Layer2Display(new Layer2Endpoint("localhost", LAN2PORT, 19));

		// Create a 3rd switch port, connected to the 3rd Light System, and attached
		// to our switch's port 2.
		sw.attachPort(new SwitchPort("localhost", LAN3PORT, 2),
				new SwitchLightPanel("LAN 3", "localhost", LAN3PORT));

		// 2 Hosts on light system 3.
		new Layer2Display(new Layer2Endpoint("localhost", LAN3PORT, 20));
		new Layer2Display(new Layer2Endpoint("localhost", LAN3PORT, 21));

		// Create a 4th switch port, connected to the 4th Light System, and attached
		// to our switch's port 3.
		sw.attachPort(new SwitchPort("localhost", LAN4PORT, 3),
				new SwitchLightPanel("LAN 4", "localhost", LAN4PORT));

		// 2 Hosts on light system 4.
		new Layer2Display(new Layer2Endpoint("localhost", LAN4PORT, 22));
		new Layer2Display(new Layer2Endpoint("localhost", LAN4PORT, 23));

	}
}