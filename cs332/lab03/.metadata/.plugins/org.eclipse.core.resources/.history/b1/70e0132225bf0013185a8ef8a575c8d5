
public class L3Handler implements L3ShimListener {


	private L3Address myAddr;
	private L3Shim myL3Shim;
	private L3Listener myListener;

	/**
	 * create a L3Handler which needs a L3Address.
	 * The network part of the address is given, the host
	 * portion is found in the L2Endpoint.  Also set this 
	 * handler to listen to the layer below (L2Endpoint). 
	 * @param l2e, the layer below
	 * @param netPart, the network part of the address
	 */
	public L3Handler( Layer2Endpoint l2e, int netPart ) {
		this.myAddr = new L3Address( netPart, l2e.getMacAddr() );
		this.myL3Shim = new L3Shim( l2e );
		this.myL3Shim.setListener( this, L3Shim.L3TYPE_L3 );
	}

	/**
	 * A default implementation to NOT drop an incoming
	 * packet.  Override in a subclass (L3Endpoint?) to check
	 * if the packet is actually for this interface.
	 * @param packet, the packet as an L3Packet
	 * @param bits, the packet, as a bit-string
	 * @return false
	 */
	public boolean dropReceived( L3Packet packet, String bits ) {
		return false;
	}

	/**
	 * getter for a L3Address
	 * @return, the L3Address
	 */
	public L3Address gettAddr() { return myAddr; }

	/**
	 * sends the packet down to the L3Shim. This converts the
	 * packet to a bit-string before sending.
	 * @param packet, the L3 Packet to send
	 */
	public void send( L3Packet packet ) {
		//get the destMAC from the packet
		int destMAC = packet.getDestAddr().getHost();
		myL3Shim.send( packet.toString(), L3Shim.L3TYPE_L3, destMAC );
	}

	/**
	 * Allow another object (i.e. a L4? object) to register
	 * itself to be called when a good packet comes in. 
	 * @param l, the listener
	 */
	public void setListener( L3Listener l ) {
		assert ( myListener == null ): "LISTENER ALREADY SET! L3Handler.setListener()";
		myListener = l;
	}


	/**
	 * Creates a L3Packet which parses out the packet-string.
	 * Checks the incoming packet to make sure it is valid
	 * and intended for this interface.  Drops the packet otherwise.
	 * If someone else is listening, pass the packet to the next level up.
	 */
	@Override
	public void packetReceived(Layer2Endpoint l2e, String packetString) {
		try
		{
			L3Packet l3p = new L3Packet( packetString );

			/* Throw away the packet if it is supposed to be filtered out.
			 * A subclass will often implement this.
			 */
			if ( dropReceived(l3p, packetString) ) 
				return;
			
			// If someone is listening, pass the packet along.
			if ( myListener != null ) 
				myListener.packetReceived( this, l3p );

		}
		catch ( Exception e )
		{
			System.err.println("Bad L3 Packet.  Dropping...");
		}
	}
	
}
