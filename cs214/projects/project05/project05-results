Script started on Wed 12 Mar 2014 07:21:25 PM EDT
theo@theo-VBox:~/Desktop/cs214/project05$ cat quad.cpp 
/* quad.cpp computes the roots of a second degree polynomial
 * using the quadratic formula.
 *
 * Input: a, b, c: all doubles;
          root1, root2: the calculated roots as doubles
 * PRE: a, b, and c are real values, root1 and root2 are empty
 * Output: If an error occured the corresponding message is printed
 *         else the roots root1 and root2 are printed.
 *
 * Begun by: Charles Blum, for CS 214 at Calvin College.
 * Completed by: Charles Blum
 * Date: 12 March 2014
 **********************************************************************/

#include <iostream>
#include <cmath>
using namespace std;


bool quadraticRoots(double a, double b, double c,
                        double & root1, double & root2);

int main() {
  cout << "\nFor a quadratic equation (y = ax^2 + bx + c),";
  cout << "\nEnter the roots,";
  cout << "\na=";
  double a, b, c;
  cin >> a;
  cout << "\nb=";
  cin >> b;
  cout << "\nc=";
  cin >> c;

  double root1, root2;
  if ( quadraticRoots(a, b, c, root1, root2) )
  {
  cout << "\nThe first root is " << root1
       << "\n and the second root is " << root2 << endl;    
  }
  else
  {
    cout << "\nAn error occured!  Please see above and try again." << endl;
  }
}

/**************************************************
 * quadraticRoots() computes the roots of a       *
 * second degree polynomial                       *
 * Receive: a, b, c, coefficients for calculation *
 *          root1, root2, destination for         *
 *          calculated roots                      *
 * PRE: a, b, and c are real values               *
 * Passback: root1 - the first root               *
 *           root2 - the second root              *
 **************************************************/
bool quadraticRoots(double a, double b, double c,
                        double & root1, double & root2) {
  if (a != 0)
  {
    double arg = pow(b, 2.0) - 4 * a * c;
    if (arg >= 0)
    {
      root1 = (-b + sqrt(arg))/(2*a);
      root2 = (-b - sqrt(arg))/(2*a);
      return true;
    }
    else 
    {
      cerr << "\n*** quadraticRoots(): b^2 - 4ac is negative!" << endl;
      root1 = root2 = 0.0;
      return false;
    }
  }
  else
  {
    cerr << "\n*** QuadraticRoots(): a is zero!" << endl;
    root1 = root2 = 0.0;
    return false;
  }
}
theo@theo-VBox:~/Desktop/cs214/project05$ g++ -Wall quad.cpp -o cpp_quad 
theo@theo-VBox:~/Desktop/cs214/project05$ ./q[Kcpp_quad 

For a quadratic equation (y = ax^2 + bx + c),
Enter the roots,
a=1

b=2

c=1

The first root is -1
 and the second root is -1
theo@theo-VBox:~/Desktop/cs214/project05$ ./cpp_quad 

For a quadratic equation (y = ax^2 + bx + c),
Enter the roots,
a=0

b=1

c=2

*** QuadraticRoots(): a is zero!

An error occured!  Please see above and try again.
theo@theo-VBox:~/Desktop/cs214/project05$ ./cpp_quad 

For a quadratic equation (y = ax^2 + bx + c),
Enter the roots,
a=2

b=8

c=-16

The first root is 1.4641
 and the second root is -5.4641
theo@theo-VBox:~/Desktop/cs214/project05$ ./cpp_quad 

For a quadratic equation (y = ax^2 + bx + c),
Enter the roots,
a=2

b=8

c=16

*** quadraticRoots(): b^2 - 4ac is negative!

An error occured!  Please see above and try again.
theo@theo-VBox:~/Desktop/cs214/project05$ ./cpp_quad 

For a quadratic equation (y = ax^2 + bx + c),
Enter the roots,
a=1

b=16

c=64

The first root is -8
 and the second root is -8
theo@theo-VBox:~/Desktop/cs214/project05$ exit

Script done on Wed 12 Mar 2014 07:22:38 PM EDT
Script started on Thu 13 Mar 2014 12:06:14 AM EDT
theo@theo-VBox:~/Desktop/cs214/project05$ cat quad.adb 
-- quad.adb computes the roots of a 2nd degree polynomial
--
-- Input: a, b, c, doulbes,
--        root1, root2, doubles.
-- Precondition: a, b, c, are real values.
-- Output: Error message for a given error
--         else the roots root 1 and root2
--
-- Begun by: Charles Blum, for CS 214 at Calvin College.
-- Completed by:Charles Blum
-- Date:12 March 2014
--------------------------------------------------------------

with Ada.Text_IO, Ada.Float_Text_IO, Ada.Numerics.Elementary_Functions;
use  Ada.Text_IO, Ada.Float_Text_IO, Ada.Numerics.Elementary_functions;

procedure quad is

   a, b, c      : Float;
   root1, root2 : Float;
   valid	: Boolean;

   ------------------------------------------------
   --  quadraticRoots() computes the roots of a 
   --  2nd degree polynomial.           
   -- Receive: a, b, c, doubles which are coefficients
   -- PRE: a, b, c, are real values.
   -- Passback: root1 - the first root,
   --           root2 - the second root.
   ------------------------------------------------
   procedure quadraticRoots( a, b, c : in Float; root1, root2 : out Float; valid : out Boolean ) is 
   arg: Float := b ** 2 - 4.0 * a * c;   
   begin
      if a = 0.0 then
	 Put_Line("a is Zero! Please try again.");
	 root1 := 0.0;
	 root2 := 0.0;
     	 valid := false;
      else
	 if arg >= 0.0 then
	    root1 :=  (-b + Sqrt(arg))  / ( 2.0 * a );
	    root2 :=  (-b - Sqrt(arg))  / ( 2.0 * a );
      	    valid := True;
	 else
	    Put_Line("b^2 - 4ac is is Negative! please try again.");
	    root1 := 0.0;
	    root2 := 0.0;
	 end if;
      end if;
   end quadraticRoots;

begin                                           -- Prompt for input
   Put_Line("To find the roots of a quadratic equation,");
   Put_Line("(form y = ax^2 + bx + c) please enter the coefficients:");
   Put("a=");
   Get(a);
   Put("b=");
   Get(b);
   Put("c=");
   Get(c);

   quadraticRoots(a, b, c, root1, root2, valid);
   if valid then
     Put("The first root is ");
     Put(root1);
     New_Line;
     Put(" and the second root is ");
     Put(root2);
   end if;
end quad;

theo@theo-VBox:~/Desktop/cs214/project05$ gnatmka[K[Kake quad.adb 
gnatmake: "quad" up to date.
theo@theo-VBox:~/Desktop/cs214/project05$ ./quad 
To find the roots of a quadratic equation,
(form y = ax^2 + bx + c) please enter the coefficients:
a=1
b=2
c=1
The first root is -1.00000E+00
 and the second root is -1.00000E+00
theo@theo-VBox:~/Desktop/cs214/project05$ ./quad 
To find the roots of a quadratic equation,
(form y = ax^2 + bx + c) please enter the coefficients:
a=1
b=5
c=25
b^2 - 4ac is is Negative! please try again.
theo@theo-VBox:~/Desktop/cs214/project05$ ./quad 
To find the roots of a quadratic equation,
(form y = ax^2 + bx + c) please enter the coefficients:
a=1
b=10
c=25
The first root is -5.00000E+00
 and the second root is -5.00000E+00
theo@theo-VBox:~/Desktop/cs214/project05$ ./quad 
To find the roots of a quadratic equation,
(form y = ax^2 + bx + c) please enter the coefficients:
a=0
b=1
c=2
a is Zero! Please try again.
theo@theo-VBox:~/Desktop/cs214/project05$ exit

Script done on Thu 13 Mar 2014 12:06:55 AM EDT
Script started on Thu 13 Mar 2014 02:10:26 AM EDT
theo@theo-VBox:~/Desktop/cs214/project05$ cat quad.el elisp.results 
;;; quad.el uses the quadratic formula to compute
;;; the roots of a 2nd degree polynomial.
;;;
;;; Input: a, b, c, real number which are the coefficients
;;; Output: root1, root2, the roots of the polynomial
;;;
;;; Begun by: Charles Blum, for CS 214 at Calvin College.
;;; Completed by:Charles Blum
;;; Date: 12 March 2014
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:;;;;;;
;;; quad() uses the quadratic formula to calculate the roots  
;;; of a 2nd degree polynomial
;;; Receive: a, b, c, the coefficients of the polynomial                                   
;;; PRE: a, b, and c are real numbers
;;; Return: root1 and root2, the roots of the polynomial
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun quadRoots (a b c)
  (setq arg (- (* b b) (* 4 a c)))
  (if (= a 0)
      (progn (list "coefficient a is Zero! Please try again."
	     (setq root1 0.0)
	     (setq root2 0.0)
	     ))
    (if (< arg 0)
	(progn (list "b^2 - 4ac is negative! Please try again."
	       (setq root1 0.0)
	       (setq root2 0.0)
	       ))
      (progn (list "valid" 
	     (/ (+ (- b) (sqrt arg)) (* 2 a))
	     (/ (- (- b) (sqrt arg)) (* 2 a))
	     ))
      )
  ) 
)

(defun main (a b c)
  (interactive "na=\nnb=\nnc=")
  (setq roots (quadRoots a b c))
  (setq valid (elt roots 0))
  (if (equal valid "valid")
    (progn  (setq root1 (elt roots 1))
	    (setq root2 (elt roots 2))
	    (message "The first root is %i \nand the second root is %i" root1 root2)
    )
	(message "%s\nSomething didn't calculate right. Please try again." valid)
  )
)





;; Charles Blum
;; Project 5 - quadratics
;; elisp results
;; 12 March 2014

(load "/home/theo/Desktop/cs214/project05/quad.el")
t

(main 1 2 1)
"The first root is -1 
and the second root is -1"


(main 1 5 25)
"b^2 - 4ac is negative! Please try again.
Something didn't calculate right. Please try again."

(main 1 10 25)
"The first root is -5 
and the second root is -5"

(main 1 0 -25)
"The first root is 5 
and the second root is -5"

(main 0 1 2)
"coefficient a is Zero! Please try again.
Something didn't calculate right. Please try again."





theo@theo-VBox:~/Desktop/cs214/project05$ exit

Script done on Thu 13 Mar 2014 02:10:45 AM EDT
Script started on Thu 13 Mar 2014 12:50:51 AM EDT
theo@theo-VBox:~/Desktop/cs214/project05$ cat r[Kquad`[K.rb 
# quad.rb computes the roots of a 2nd degree polynomial
# using the quadratic formula
#
# Input: a, b, c, the coefficients of the polynomial.
# Precondition: a, b, and c are real numbers.
# Output: error message accordingly if coefficients don't
#         return a real number, other wise root1 and root2.
#
# Begun by: Charles Blum, for CS 214 at Calvin College.
# Completed by:Charles Blum
# Date: 12 March 2014
##################################################################


# quadraticRoots() computes the roots using the quadratic formula
# Receive: a, b, c, the polynomial coefficients,  
# PRE: a, b, c are all real numbers.
# Return: root1, root2, the calculated roots, 
#         valid, determines if an error occured during calculation
##################################################################

def quadRoots( a, b, c )
  #form of roots: [ validity (boolean), root1 (float), root2 (float) ]
  if a == 0
    puts "Coefficient a is Zero! Please try again.";
    roots = [ false, 0.0, 0.0]
  else
    arg = ((b ** 2) - (4 * a * c))
    if arg < 0
      puts "b^2 - 4ac is negative! Please Try again.";
      roots = [ false, 0.0, 0.0 ]
    else
      roots = [ true, ((-b + Math.sqrt(arg))/(2 * a)), ((-b - Math.sqrt(arg))/(2 * a)) ]
    end
  end
end 

def main
  puts "Calculate the roots of a 2nd degree polymonial"; 
  puts "( y = ax^2 + bx + c ) using the quadratic formula:";
  print "a=";
  a = gets.to_f
  print "b="; 
  b = gets.to_f
  print "c="; 
  c = gets.to_f
  roots = quadRoots( a, b, c )
  if roots[0]
    puts "The first root is: #{roots[1]}";
    puts "and the second root is: #{roots[2]}";
  end
end

main
theo@theo-VBox:~/Desktop/cs214/project05$ ruby ./[K[Kquad.rb
Calculate the roots of a 2nd degree polymonial
( y = ax^2 + bx + c ) using the quadratic formula:
a=1
b=2
c=1
The first root is: -1.0
and the second root is: -1.0
theo@theo-VBox:~/Desktop/cs214/project05$ ruby quad.rb
Calculate the roots of a 2nd degree polymonial
( y = ax^2 + bx + c ) using the quadratic formula:
a=1
b=10
c=25
The first root is: -5.0
and the second root is: -5.0
theo@theo-VBox:~/Desktop/cs214/project05$ ruby quad.rb
Calculate the roots of a 2nd degree polymonial
( y = ax^2 + bx + c ) using the quadratic formula:
a=0
b=6
c=32
Coefficient a is Zero! Please try again.
theo@theo-VBox:~/Desktop/cs214/project05$ ruby quad.rb
Calculate the roots of a 2nd degree polymonial
( y = ax^2 + bx + c ) using the quadratic formula:
a=1
b=2
c=3
b^2 - 4ac is negative! Please Try again.
theo@theo-VBox:~/Desktop/cs214/project05$ exit

Script done on Thu 13 Mar 2014 12:51:25 AM EDT
